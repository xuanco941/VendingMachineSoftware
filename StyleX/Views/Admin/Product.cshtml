@{
    Layout = "_LayoutAdmin";
}
<div id="appProduct">
    <div class="row">
        <div class="row align-items-end col-9">
            <div class="col-md-3 mb-3">
                <label>Thuộc danh mục:</label>
                <select class="form-control" v-model="categoryID">
                    <option value="0">Tất cả</option>
                    <option v-for="item in tableCategory" v-bind:value="item.categoryID">{{item.name}}</option>
                </select>
            </div>
            <div class="col-md-3 mb-3">
                <label>Trạng thái:</label>
                <select class="form-control" v-model="status">
                    <option value="0">Tất cả</option>
                    <option value="1">Đang bán</option>
                    <option value="2">Ngừng bán</option>
                </select>
            </div>
            <div class="col-md-3 mb-3">
                <button class="btn btn-success" style="width: 120px;" v-on:click="GetProducts()">Tìm kiếm</button>
            </div>
        </div>
        <div class="col-4 col-md-3 justify-content-end d-flex align-items-end">
            <button style="height:39px; min-width:150px;" class="btn btn-primary mb-3" data-toggle="modal" data-target="#modalAdd">Thêm sản phẩm</button>
        </div>
    </div>

    <div style="overflow-x:auto;">
        <table class="table table-bordered" style="vertical-align: middle; text-align:center">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Hình ảnh</th>
                    <th scope="col">Tên sản phẩm</th>
                    <th scope="col">Mô tả</th>
                    <th scope="col">Giá</th>
                    <th scope="col">Giảm giá(%)</th>
                    <th scope="col">Hạn giảm giá</th>
                    <th scope="col">Trạng thái</th>
                    <th scope="col">Kho</th>
                    <th scope="col">Thuộc danh mục</th>
                    <th scope="col">Thao tác</th>
                </tr>
            </thead>
            <tbody style="vertical-align:middle; font-size: 18px;">
                <tr v-if="isLoad">
                    <td style="font-size: 40px; text-align:center;" colspan="11"><i class="fa-solid fa-spinner fa-spin-pulse"></i></td>
                </tr>
                <tr v-if="isLoad == false" v-for="(item,index) in dataTable">
                    <td>{{index+1}}</td>
                    <td>
                        <a v-bind:href="item.posterUrl" alt="preview" target="_blank">
                            <img v-bind:src="item.posterUrl" style="height: 100px" />
                        </a>
                        <div class="d-flex justify-content-between my-1 mx-1">
                            <a class="mx-1 my-1" v-if="item.posterDesignUrl1" v-bind:href="item.posterDesignUrl1" alt="img1" target="_blank">
                                <img v-bind:src="item.posterDesignUrl1" style="height: 50px" />
                            </a>
                            <a class="mx-1 my-1" v-if="item.posterDesignUrl2" v-bind:href="item.posterDesignUrl2" alt="img2" target="_blank">
                                <img v-bind:src="item.posterDesignUrl2" style="height: 50px" />
                            </a>
                        </div>
                    </td>
                    <td>{{item.name}}</td>
                    <td>{{item.description}}</td>
                    <td>{{Number(item.price).toLocaleString("en-US")}}</td>
                    <td>{{item.sale}}</td>
                    <td>{{formatDateDisplay(item.saleEndAt)}}</td>
                    <td>
                        <span class="badge badge-info" v-if="item.status==false">Ngừng bán</span>
                        <span class="badge badge-success" v-if="item.status==true">Đang bán</span>
                    </td>
                    <td>
                        <div v-if="item.warehouses && item.warehouses[0]">
                            <div v-for="itemW in item.warehouses">
                                Size {{itemW.size}}: Còn {{itemW.amount}} sản phẩm
                            </div>
                        </div>
                        <div v-if="!item.warehouses || !item.warehouses[0]">
                            Chưa có trong kho
                        </div>
                    </td>
                    <td>{{item.categoryName}}</td>
                    <td>
                        <button style="width:110px" class="btn btn-info mx-1 my-1" data-toggle="modal" data-target="#modalSetting" v-on:click="PopupSettingProduct(item.modelUrl,item.productSettings)">Thiết lập</button>
                        <button style="width:110px" class="btn btn-warning mx-1 my-1" data-toggle="modal" data-target="#modalUpdate" v-on:click="PopupUpdateProduct(item)">Cập nhật</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <div class="d-flex justify-content-center mt-3" id="div-pagination">
        </div>
    </div>




    <div class="modal fade" id="modalAdd" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 900px">
            <div class="modal-content" style="margin-bottom: 150px">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Thêm sản phẩm mới</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="max-height: 550px;">
                    <div class="d-flex align-items-stretch">
                        <div class="col-md-5">
                            <model-viewer id="model-add" class="w-100 h-100" alt=""
                                          ar shadow-intensity="1" camera-controls disable-pan
                                          disable-tap autoplay auto-rotation shadow-softness="0.1" min-camera-orbit="auto auto 100%"
                                          max-camera-orbit="auto auto 100%">
                            </model-viewer>
                        </div>
                        <div class="col-md-7">
                            <div class="px-2" style="overflow-y:auto; max-height:480px;">
                                <div class="form-group">
                                    <label>Thuộc danh mục</label>
                                    <select class="form-control" v-model="dataAdd.categoryID">
                                        <option v-for="item in tableCategory" v-bind:value="item.categoryID">{{item.name}}</option>
                                    </select>
                                    <div class="text-danger" style="font-size: 14px;">{{dataAdd.messageCategory}}</div>

                                </div>
                                <div class="form-group">
                                    <label>Chọn file mô hình (glb, gltf)</label>
                                    <input type="file" class="form-control" v-on:change="ChangeModel" id="input-model">
                                    <div class="text-danger" style="font-size: 14px;">{{dataAdd.messageModel}}</div>
                                </div>
                                <div class="form-group">
                                    <label>Chọn ảnh xem trước 1</label>
                                    <input type="file" class="form-control" v-on:change="ChangeImage" id="input-image">
                                    <div class="text-danger" style="font-size: 14px;">{{dataAdd.messageFile}}</div>
                                    <img v-if="dataAdd.image" style="width: 80px;" v-bind:src="dataAdd.image" />
                                </div>
                                <div class="form-group">
                                    <label>Chọn ảnh xem trước 2</label>
                                    <input type="file" class="form-control" v-on:change="ChangeImage2" id="input-image2">
                                    <img v-if="dataAdd.image2" style="width: 80px;" v-bind:src="dataAdd.image2" />
                                </div>
                                <div class="form-group">
                                    <label>Chọn ảnh xem trước 3</label>
                                    <input type="file" class="form-control" v-on:change="ChangeImage3" id="input-image3">
                                    <img v-if="dataAdd.image3" style="width: 80px;" v-bind:src="dataAdd.image3" />
                                </div>
                                <div class="form-group">
                                    <label>Tên sản phẩm</label>
                                    <input type="text" class="form-control" v-model="dataAdd.name">
                                    <div class="text-danger" style="font-size: 14px;">{{dataAdd.messageName}}</div>
                                </div>
                                <div class="form-group">
                                    <label>Mô tả</label>
                                    <input type="text" class="form-control" v-model="dataAdd.description">
                                </div>
                                <div class="form-group">
                                    <label>Giá bán (&#8363;)</label>
                                    <input type="text" class="form-control" v-model="dataAdd.price">
                                    <div class="text-danger" style="font-size: 14px;">{{dataAdd.messagePrice}}</div>
                                </div>
                                <div class="form-group">
                                    <label>Khuyến mại(%)</label>
                                    <input type="text" class="form-control" v-model="dataAdd.sale">
                                </div>
                                <div class="form-group">
                                    <label>Hạn khuyến mại</label>
                                    <input type="datetime-local" class="form-control" v-model="dataAdd.saleEndAt">
                                </div>
                                <div class="form-group">
                                    <label>Trạng thái</label>
                                    <select class="form-control" v-model="dataAdd.status">
                                        <option value="true">Đang bán</option>
                                        <option value="false">Ngừng bán</option>
                                    </select>
                                </div>
                            </div>

                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button v-if="dataAdd.isLoad == false" type="button" class="btn btn-primary" v-on:click="AddProduct()">Xác nhận</button>
                    <button v-if="dataAdd.isLoad" type="button" class="btn btn-primary">Đang xử lý...</button>

                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="modalUpdate" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 900px">
            <div class="modal-content" style="margin-bottom: 150px">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Cập nhật sản phẩm </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="max-height: 550px;">
                    <div class="d-flex align-items-stretch">
                        <div class="col-md-5">
                            <model-viewer id="model-update" class="w-100 h-100" alt=""
                                          ar shadow-intensity="1" camera-controls disable-pan
                                          disable-tap autoplay auto-rotation shadow-softness="0.1" min-camera-orbit="auto auto 100%"
                                          max-camera-orbit="auto auto 100%">
                            </model-viewer>
                        </div>
                        <div class="col-md-7">
                            <div class="px-2" style="overflow-y:auto; max-height:480px;">
                                <div class="form-group">
                                    <label>Thuộc danh mục</label>
                                    <select class="form-control" v-model="dataUpdate.categoryID">
                                        <option v-for="item in tableCategory" v-bind:value="item.categoryID">{{item.name}}</option>
                                    </select>
                                    <div class="text-danger" style="font-size: 14px;">{{dataUpdate.messageCategory}}</div>
                                </div>
                                <div class="form-group">
                                    <label>Chọn ảnh xem trước 1</label>
                                    <input type="file" class="form-control" v-on:change="ChangeImageU" id="input-image-u">
                                    <div class="text-danger" style="font-size: 14px;">{{dataUpdate.messageFile}}</div>
                                    <img v-if="dataUpdate.image" style="width: 80px;" v-bind:src="dataUpdate.image" />
                                </div>
                                <div class="form-group">
                                    <label>Chọn ảnh xem trước 2</label>
                                    <input type="file" class="form-control" v-on:change="ChangeImageU2" id="input-image-u2">
                                    <img v-if="dataUpdate.image2" style="width: 80px;" v-bind:src="dataUpdate.image2" />
                                </div>
                                <div class="form-group">
                                    <label>Chọn ảnh xem trước 3</label>
                                    <input type="file" class="form-control" v-on:change="ChangeImageU3" id="input-image-u3">
                                    <img v-if="dataUpdate.image3" style="width: 80px;" v-bind:src="dataUpdate.image3" />
                                </div>
                                <div class="form-group">
                                    <label>Tên sản phẩm</label>
                                    <input type="text" class="form-control" v-model="dataUpdate.name">
                                    <div class="text-danger" style="font-size: 14px;">{{dataUpdate.messageName}}</div>
                                </div>
                                <div class="form-group">
                                    <label>Mô tả</label>
                                    <input type="text" class="form-control" v-model="dataUpdate.description">
                                </div>
                                <div class="form-group">
                                    <label>Giá bán (&#8363;)</label>
                                    <input type="text" class="form-control" v-model="dataUpdate.price">
                                    <div class="text-danger" style="font-size: 14px;">{{dataUpdate.messagePrice}}</div>
                                </div>
                                <div class="form-group">
                                    <label>Khuyến mại(%)</label>
                                    <input type="text" class="form-control" v-model="dataUpdate.sale">
                                </div>
                                <div class="form-group">
                                    <label>Hạn khuyến mại</label>
                                    <input type="datetime-local" class="form-control" v-model="dataUpdate.saleEndAt">
                                </div>
                                <div class="form-group">
                                    <label>Trạng thái</label>
                                    <select class="form-control" v-model="dataUpdate.status">
                                        <option value="true">Đang bán</option>
                                        <option value="false">Ngừng bán</option>
                                    </select>
                                </div>
                            </div>

                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button v-if="dataAdd.isLoad == false" type="button" class="btn btn-primary" v-on:click="UpdateProduct()">Xác nhận</button>
                    <button v-if="dataAdd.isLoad" type="button" class="btn btn-primary">Đang xử lý...</button>

                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="modalSetting" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 900px">
            <div class="modal-content" style="margin-bottom: 150px">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Cấu hình thiết kế cho sản phẩm</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="max-height: 550px;">
                    <div class="d-flex align-items-stretch">
                        <div class="col-md-5">
                            <model-viewer id="model-setting" class="w-100 h-100" alt=""
                                          ar shadow-intensity="1" camera-controls disable-pan
                                          disable-tap autoplay auto-rotation shadow-softness="0.1" min-camera-orbit="auto auto 100%"
                                          max-camera-orbit="auto auto 100%">
                            </model-viewer>
                        </div>
                        <div class="col-md-7">
                            <div class="px-2" style="overflow-y:auto; max-height:668px;">
                                <div class="form-group">
                                    <label>Bộ phận thao tác</label>
                                    <select class="form-control" v-model="dataSetting.productSettingID" v-on:change="GetProductSettings()">
                                        <option v-for="item in dataSetting.productSettings" v-bind:value="item.productSettingID">{{item.productPartNameDefault}}</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Tên hiển thị</label>
                                    <input type="text" class="form-control" v-model="dataSetting.productPartNameCustom">
                                </div>
                                <div class="form-group">
                                    <label>Màu sắc</label>
                                    <select class="form-control" v-model="dataSetting.isDefault">
                                        <option value="true">Màu cơ bản (màu trắng)</option>
                                        <option value="false">Màu từ model (màu gốc)</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Tên chất liệu mặc định</label>
                                    <input type="text" class="form-control" v-model="dataSetting.nameMaterialDefault">
                                </div>
                                <div class="form-group">
                                    <label>Chất liệu thay đổi</label>
                                    <div class="d-flex flex-wrap">
                                        <div class="form-check mx-3 my-3 d-flex align-items-center" v-for="item in tableMaterial">
                                            <input style="height:18px; width:18px;" class="form-check-input mt-0" type="checkbox" v-bind:value="item.materialID" v-bind:id="item.name+item.materialID" v-model="dataSetting.materials">
                                            <label class="form-check-label d-flex align-items-center" v-bind:for="item.name+item.materialID">
                                                {{item.name}}
                                                <img v-bind:src="item.url" class="mx-1" style="height: 35px;" />
                                            </label>
                                        </div>
                                    </div>
                                </div>

                            </div>

                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button v-if="dataSetting.isLoad == false" type="button" class="btn btn-primary" v-on:click="SettingProduct()">Cập nhật</button>
                    <button v-if="dataSetting.isLoad" type="button" class="btn btn-primary">Đang xử lý...</button>

                </div>
            </div>
        </div>
    </div>




</div>


@section Scripts {

    <script>
        var appProduct = new Vue({
            el: "#appProduct",
            data: {
                resData: [],
                dataTable: [],
                isLoad: true,
                categoryID: 0,
                status: 0,
                totalPages: 1,
                pageSize: 10,
                tableCategory: [],
                tableMaterial: [],


                dataAdd: {
                    model: {},
                    fileModel: "",
                    messageModel: "",


                    name: "",
                    messageName: "",

                    file: "",
                    image: "",
                    messageFile: "",

                    file2: "",
                    image2: "",
                    file3: "",
                    image3: "",

                    description: "",

                    price: "",
                    messagePrice: "",

                    sale: "",
                    messageSale: "",

                    saleEndAt: new Date().toISOString().slice(0, 16),
                    status: true,
                    categoryID: "",
                    messageCategory: "",


                    isLoad: false
                },
                dataUpdate: {
                    productID: "",
                    name: "",
                    messageName: "",

                    file: "",
                    image: "",
                    messageFile: "",
                    file2: "",
                    image2: "",
                    file2: "",
                    image2: "",

                    description: "",

                    price: "",
                    messagePrice: "",

                    sale: "",
                    messageSale: "",

                    saleEndAt: new Date().toISOString().slice(0, 16),
                    status: true,
                    categoryID: "",
                    messageCategory: "",


                    isLoad: false
                },
                dataSetting: {
                    productSettings: [],
                    productSettingID: 0,
                    productPartNameCustom: "",
                    nameMaterialDefault: "",

                    materials: [],
                    isDefault: false,

                    model: {},
                    isLoad: false
                }





            },
            methods: {
                init: async function () {
                    var self = this;

                    await this.GetCategory();
                    await this.GetProducts();
                    await this.GetMaterial();

                    this.$forceUpdate();
                },
                GetProducts: async function () {
                    var self = this;
                    self.isLoad = true;
                    self.dataTable = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/admin/GetProducts",
                        data: JSON.stringify({
                            categoryID: self.categoryID,
                            status: self.status
                        }),
                        success: function (res) {
                            self.isLoad = false;
                            if (res.status == 1) {
                                self.resData = res.data;
                                self.dataTable = self.resData.slice(0, self.pageSize);
                                self.totalPages = Math.ceil(self.resData.length / self.pageSize);
                                if (self.resData.length > 0) {
                                    document.getElementById("div-pagination").innerHTML = `<ul id="pagination" class="pagination-md"></ul>`;

                                    $('#pagination').twbsPagination({
                                        totalPages: self.totalPages,
                                        visiblePages: 6,
                                        first: "Trang đầu",
                                        last: "Trang cuối",
                                        next: 'Trang tiếp',
                                        prev: 'Trang trước',
                                        onPageClick: function (event, page) {
                                            var start = (page - 1) * self.pageSize;
                                            var end = page * self.pageSize;
                                            self.dataTable = self.resData.slice(start, end);
                                        }
                                    });
                                }


                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            self.isLoad = false;
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },
                ChangeImage: function (e) {
                    var self = this;
                    var file = e.target.files[0];
                    if (isFileImage(file)) {
                        self.dataAdd.image = URL.createObjectURL(file);
                        self.dataAdd.file = file;
                        self.dataAdd.messageFile = "";
                    }
                    else {
                        self.dataAdd.messageFile = "Định dạng file không phù hợp.";
                        self.dataAdd.image = "";
                        self.dataAdd.file = "";
                        document.getElementById('input-image').value = "";
                    }

                },
                ChangeImage2: function (e) {
                    var self = this;
                    var file = e.target.files[0];
                    if (isFileImage(file)) {
                        self.dataAdd.image2 = URL.createObjectURL(file);
                        self.dataAdd.file2 = file;
                    }
                    else {
                        self.dataAdd.image2 = "";
                        self.dataAdd.file2 = "";
                        document.getElementById('input-image2').value = "";
                    }

                },
                ChangeImage3: function (e) {
                    var self = this;
                    var file = e.target.files[0];
                    if (isFileImage(file)) {
                        self.dataAdd.image3 = URL.createObjectURL(file);
                        self.dataAdd.file3 = file;
                    }
                    else {
                        self.dataAdd.image3 = "";
                        self.dataAdd.file3 = "";
                        document.getElementById('input-image3').value = "";
                    }

                },

                ChangeModel: function (e) {
                    var self = this;
                    var file = e.target.files[0];
                    const fileExtension = file.name.split('.').pop().toLowerCase();

                    self.dataAdd.productParts = [];
                    if (fileExtension === 'glb' || fileExtension === 'gltf') {
                        document.getElementById('model-add').style.display = "block";
                        document.getElementById('model-add').src = URL.createObjectURL(file);
                        self.dataAdd.fileModel = file;
                        self.dataAdd.messageModel = "";
                        document.getElementById("model-add").addEventListener('load', (e) => {
                            self.dataAdd.model = e.target.model;

                        });
                    }
                    else {
                        document.getElementById('model-add').style.display = "none";
                        document.getElementById('model-add').src = "";
                        self.dataAdd.messageModel = "Định dạng file không phù hợp.";
                        self.dataAdd.fileModel = "";
                        document.getElementById('input-model').value = "";
                        self.dataAdd.model = {};
                    }

                },
                GetCategory: async function () {
                    var self = this;
                    self.tableCategory = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/admin/GetCategories",
                        data: JSON.stringify({
                        }),
                        success: function (res) {
                            if (res.status == 1) {
                                self.tableCategory = res.data;
                                if (self.tableCategory && self.tableCategory.length > 0) {
                                    self.dataAdd.categoryID = self.tableCategory[0].categoryID;
                                }
                                else {
                                    self.dataAdd.categoryID = "";
                                }
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            ShowAlert(error, "danger");
                        }
                    });

                },
                AddProduct: async function () {
                    var self = this;
                    console.log(self.dataAdd);

                    if (!self.dataAdd.categoryID) {
                        self.dataAdd.messageCategory = "Bạn chưa chọn nhóm danh mục.";
                        return;
                    }
                    else {
                        self.dataAdd.messageCategory = "";
                    }

                    if (!self.dataAdd.fileModel) {
                        self.dataAdd.messageModel = "Bạn chưa chọn file model.";
                        return;
                    }
                    else {
                        self.dataAdd.messageModel = "";
                    }
                    if (!self.dataAdd.file) {
                        self.dataAdd.messageFile = "Bạn chưa chọn ảnh xem trước cho sản phẩm.";
                        return;
                    }
                    else {
                        self.dataAdd.messageFile = "";
                    }
                    if (!self.dataAdd.name) {
                        self.dataAdd.messageName = "Bạn chưa đặt tên cho sản phẩm này.";
                        return;
                    }
                    else {
                        self.dataAdd.messageName = "";
                    }
                    if (!self.dataAdd.price || isNaN(self.dataAdd.price)) {
                        self.dataAdd.messagePrice = "Bạn chưa nhập giá tiền cho sản phẩm.";
                        return;
                    }
                    else {
                        self.dataAdd.messagePrice = "";
                    }
                    if (!self.dataAdd.sale || isNaN(self.dataAdd.sale)) {
                        self.dataAdd.sale = 0;
                    }

                    var formData = new FormData();
                    formData.append('name', self.dataAdd.name);
                    formData.append('file', self.dataAdd.file);
                    formData.append('img1', self.dataAdd.file2);
                    formData.append('img2', self.dataAdd.file3);

                    formData.append('status', self.dataAdd.status);
                    formData.append('categoryID', self.dataAdd.categoryID);
                    formData.append('fileModel', self.dataAdd.fileModel);
                    formData.append('description', self.dataAdd.description);
                    formData.append('price', self.dataAdd.price);
                    formData.append('sale', self.dataAdd.sale);
                    formData.append('saleEndAt', self.formatDateDisplay2(self.dataAdd.saleEndAt));
                    for (var i = 0; i < self.dataAdd.model.materials.length; i++) {
                        formData.append(`productParts[${i}]`, self.dataAdd.model.materials[i].name);
                    }


                    self.dataAdd.isLoad = true;
                    $.ajax({
                        url: '/admin/addproduct',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (res) {
                            self.dataAdd.isLoad = false;
                            if (res.status == 1) {
                                self.GetProducts();

                                var proID = res.data;

                                for (let elm of self.dataAdd.model.materials) {
                                    var obj = Object.getOwnPropertySymbols(elm.pbrMetallicRoughness.metallicRoughnessTexture);
                                    var materials = elm.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e => e.description === 'materials')];

                                    var aoMap = "";
                                    var normalMap = "";
                                    var roughnessMap = "";
                                    var metalnessMap = "";
                                    console.log(materials);
                                    //type Set
                                    materials.forEach(a => {
                                        // a.map = map;
                                        aoMap = a.aoMap ? self.getImageByMap(a.aoMap.image) : null;
                                        normalMap = a.normalMap ? self.getImageByMap(a.normalMap.image) : null;
                                        roughnessMap = a.roughnessMap ? self.getImageByMap(a.roughnessMap.image) : null;
                                        metalnessMap = a.metalnessMap ? self.getImageByMap(a.metalnessMap.image) : null;


                                    });
                                    self.AddProductPart(proID, elm.name, aoMap, normalMap, roughnessMap, metalnessMap);
                                }




                                ShowAlert(res.message, "success");
                                self.dataAdd.name = "";
                                self.dataAdd.status = true;
                                self.dataAdd.file = null;
                                self.dataAdd.file2 = null;
                                self.dataAdd.file3 = null;

                                self.dataAdd.image = "";
                                self.dataAdd.image2 = "";
                                self.dataAdd.image3 = "";

                                self.dataAdd.fileModel = null;
                                self.dataAdd.description = "";
                                self.dataAdd.price = "";
                                self.dataAdd.sale = "";
                                self.dataAdd.productParts = [];
                                self.dataAdd.saleEndAt = new Date().toISOString().slice(0, 16);
                                document.getElementById('input-model').value = "";
                                document.getElementById('input-image').value = "";
                                document.getElementById('input-image2').value = "";
                                document.getElementById('input-image3').value = "";

                                document.getElementById('model-add').src = "";
                                document.getElementById('model-add').style.display = "none";


                                $('#modalAdd').modal('hide');
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }

                        },
                        error: function (error) {
                            console.log(error)
                            self.dataAdd.isLoad = false;
                            ShowAlert(error.responseJSON.mesage, "danger");
                        }
                    });

                },
                AddProductPart: async function (productID, name, aoMap, normalMap, roughnessMap, metalnessMap) {
                    var self = this;

                    var formData = new FormData();
                    formData.append('productID', productID);
                    formData.append('name', name);
                    if (aoMap) {
                        formData.append('aoMap', aoMap, 'aoMap.png');
                    }
                    else {
                        formData.append('aoMap', aoMap);
                    }
                    if (normalMap) {
                        formData.append('normalMap', normalMap, 'normalMap.png');
                    }
                    else {
                        formData.append('normalMap', normalMap);
                    }
                    if (roughnessMap) {
                        formData.append('roughnessMap', roughnessMap, 'roughnessMap.png');
                    }
                    else {
                        formData.append('roughnessMap', roughnessMap);

                    }
                    if (metalnessMap) {
                        formData.append('metalnessMap', metalnessMap, 'metalnessMap.png');
                    }
                    else {
                        formData.append('metalnessMap', metalnessMap);
                    }


                    $.ajax({
                        url: '/admin/addproductpart',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (res) {
                            if (res.status == 1) {
                                console.log(`Thêm ${name} thành công`);
                            }
                        },
                        error: function (error) {
                            ShowAlert(error.responseJSON.mesage, "danger");
                        }
                    });

                },

                getImageByMap: function (image) {
                    if (!image) {
                        return null;
                    }
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.width = image.width;
                    canvas.height = image.height;
                    context.drawImage(image, 0, 0);

                    var dataURL = canvas.toDataURL('image/png');

                    // Convert base64 to binary
                    var byteString = atob(dataURL.split(',')[1]);
                    var mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
                    var ab = new ArrayBuffer(byteString.length);
                    var ia = new Uint8Array(ab);
                    for (var i = 0; i < byteString.length; i++) {
                        ia[i] = byteString.charCodeAt(i);
                    }
                    return new Blob([ab], { type: mimeString });
                },
                formatDateDisplay: function (inputDateString) {
                    if (!inputDateString) {
                        return "";
                    }

                    // Tạo một đối tượng Date từ chuỗi đầu vào
                    var inputDate = new Date(inputDateString);

                    // Lấy các thông tin thời gian từ đối tượng Date
                    var hours = inputDate.getHours().toString().padStart(2, '0');
                    var minutes = inputDate.getMinutes().toString().padStart(2, '0');
                    var seconds = inputDate.getSeconds().toString().padStart(2, '0');
                    var day = inputDate.getDate().toString().padStart(2, '0');
                    var month = (inputDate.getMonth() + 1).toString().padStart(2, '0'); //Tháng trong JavaScript bắt đầu từ 0, nên cần cộng thêm 1
                    var year = inputDate.getFullYear();


                    if (isNaN(day) || isNaN(month) || isNaN(year)) {
                        return '';
                    }


                    var formattedDate = `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
                    return formattedDate;
                },
                formatDateDisplay2: function (inputDateString) {
                    var inputDate = new Date(inputDateString);

                    if (!inputDateString) {
                        var inputDate = new Date();
                    }

                    // Tạo một đối tượng Date từ chuỗi đầu vào

                    // Lấy các thông tin thời gian từ đối tượng Date
                    var hours = inputDate.getHours().toString().padStart(2, '0');
                    var minutes = inputDate.getMinutes().toString().padStart(2, '0');
                    var seconds = inputDate.getSeconds().toString().padStart(2, '0');
                    var day = inputDate.getDate().toString().padStart(2, '0');
                    var month = (inputDate.getMonth() + 1).toString().padStart(2, '0'); //Tháng trong JavaScript bắt đầu từ 0, nên cần cộng thêm 1
                    var year = inputDate.getFullYear();


                    if (isNaN(day) || isNaN(month) || isNaN(year)) {
                        return '';
                    }


                    var formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                    return formattedDate;
                },

                PopupUpdateProduct: function (product) {
                    var self = this;
                    console.log(product)
                    document.getElementById('model-update').src = product.modelUrl;
                    self.dataUpdate.name = product.name;
                    self.dataUpdate.image = product.posterUrl;
                    self.dataUpdate.image2 = product.posterDesignUrl1;
                    self.dataUpdate.image3 = product.posterDesignUrl2;

                    self.dataUpdate.description = product.description;
                    self.dataUpdate.price = product.price;
                    self.dataUpdate.sale = product.sale;
                    self.dataUpdate.saleEndAt = product.saleEndAt;
                    self.dataUpdate.categoryID = product.categoryID;
                    self.dataUpdate.status = product.status;
                    self.dataUpdate.productID = product.productID;

                },
                ChangeImageU: function (e) {
                    var self = this;
                    var file = e.target.files[0];
                    if (isFileImage(file)) {
                        self.dataUpdate.image = URL.createObjectURL(file);
                        self.dataUpdate.file = file;
                        self.dataUpdate.messageFile = "";
                    }
                    else {
                        self.dataUpdate.messageFile = "Định dạng file không phù hợp.";
                        self.dataUpdate.image = "";
                        self.dataUpdate.file = "";
                        document.getElementById('input-image-u').value = "";
                    }

                },
                ChangeImageU2: function (e) {
                    var self = this;
                    var file = e.target.files[0];
                    if (isFileImage(file)) {
                        self.dataUpdate.image2 = URL.createObjectURL(file);
                        self.dataUpdate.file2 = file;
                    }
                    else {
                        self.dataUpdate.image2 = "";
                        self.dataUpdate.file2 = "";
                        document.getElementById('input-image-u2').value = "";
                    }

                },
                ChangeImageU3: function (e) {
                    var self = this;
                    var file = e.target.files[0];
                    if (isFileImage(file)) {
                        self.dataUpdate.image3 = URL.createObjectURL(file);
                        self.dataUpdate.file3 = file;
                    }
                    else {
                        self.dataUpdate.image3 = "";
                        self.dataUpdate.file3 = "";
                        document.getElementById('input-image-u3').value = "";
                    }

                },

                UpdateProduct: async function () {
                    var self = this;
                    console.log(self.dataAdd);

                    if (!self.dataUpdate.categoryID) {
                        self.dataUpdate.messageCategory = "Bạn chưa chọn nhóm danh mục.";
                        return;
                    }
                    else {
                        self.dataUpdate.messageCategory = "";
                    }

                    if (!self.dataUpdate.name) {
                        self.dataUpdate.messageName = "Bạn chưa đặt tên cho sản phẩm này.";
                        return;
                    }
                    else {
                        self.dataUpdate.messageName = "";
                    }
                    if (!self.dataUpdate.price || isNaN(self.dataAdd.price)) {
                        self.dataUpdate.messagePrice = "Bạn chưa nhập giá tiền cho sản phẩm.";
                        return;
                    }
                    else {
                        self.dataUpdate.messagePrice = "";
                    }
                    if (!self.dataUpdate.sale || isNaN(self.dataUpdate.sale)) {
                        self.dataUpdate.sale = 0;
                    }

                    var formData = new FormData();
                    formData.append('name', self.dataUpdate.name);
                    formData.append('file', self.dataUpdate.file);
                    formData.append('img1', self.dataUpdate.file2);
                    formData.append('img2', self.dataUpdate.file3);

                    formData.append('status', self.dataUpdate.status);
                    formData.append('categoryID', self.dataUpdate.categoryID);
                    formData.append('description', self.dataUpdate.description);
                    formData.append('price', self.dataUpdate.price);
                    formData.append('sale', self.dataUpdate.sale);
                    formData.append('saleEndAt', self.dataUpdate.saleEndAt);
                    formData.append('productID', self.dataUpdate.productID);



                    self.dataUpdate.isLoad = true;
                    $.ajax({
                        url: '/admin/updateproduct',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (res) {
                            self.dataUpdate.isLoad = false;
                            if (res.status == 1) {
                                self.GetProducts();
                                ShowAlert(res.message, "success");
                                self.dataUpdate.name = "";
                                self.dataUpdate.status = true;
                                self.dataUpdate.file = null;
                                self.dataUpdate.image = "";
                                self.dataUpdate.file2 = null;
                                self.dataUpdate.image2 = "";
                                self.dataUpdate.file3 = null;
                                self.dataUpdate.image3 = "";
                                self.dataUpdate.description = "";
                                self.dataUpdate.price = "";
                                self.dataUpdate.sale = "";
                                self.dataUpdate.productID = "";
                                self.dataUpdate.saleEndAt = new Date().toISOString().slice(0, 16);
                                document.getElementById('input-image-u').value = "";
                                document.getElementById('input-image-u2').value = "";
                                document.getElementById('input-image-u3').value = "";


                                $('#modalUpdate').modal('hide');
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }

                        },
                        error: function (error) {
                            self.dataUpdate.isLoad = false;
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },
                GetMaterial: async function () {
                    var self = this;
                    self.tableMaterial = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/admin/GetMaterials",
                        data: JSON.stringify({
                        }),
                        success: function (res) {
                            if (res.status == 1) {
                                self.tableMaterial = res.data;
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            ShowAlert(error.responseJSON.massage, "danger");
                        }
                    });

                },
                GetProductSettings: async function () {
                    var self = this;

                    var nameMat = self.dataSetting.productSettings.find(e => e.productSettingID == self.dataSetting.productSettingID).productPartNameDefault;
                    if (self.dataSetting.model.materials) {
                        for (var m of self.dataSetting.model.materials) {
                            if (m.name != nameMat) {
                                m.setAlphaMode("BLEND");
                                m.pbrMetallicRoughness.setBaseColorFactor([m.pbrMetallicRoughness.baseColorFactor[0], m.pbrMetallicRoughness.baseColorFactor[1], m.pbrMetallicRoughness.baseColorFactor[2], 0.05]);
                            }
                            else {
                                m.setAlphaMode("OPAQUE");
                                m.pbrMetallicRoughness.setBaseColorFactor([m.pbrMetallicRoughness.baseColorFactor[0], m.pbrMetallicRoughness.baseColorFactor[1], m.pbrMetallicRoughness.baseColorFactor[2], 1]);
                            }
                        }
                    }



                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/admin/GetProductSettings",
                        data: JSON.stringify({
                            ID: self.dataSetting.productSettingID
                        }),
                        success: function (res) {
                            if (res.status == 1) {
                                self.dataSetting.productPartNameCustom = res.data.productPartNameCustom;
                                self.dataSetting.isDefault = res.data.isDefault;
                                self.dataSetting.nameMaterialDefault = res.data.nameMaterialDefault;
                                self.dataSetting.materials = res.data.materials.map(e => e.materialID);
                                self.$forceUpdate();

                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            ShowAlert(error.responseJSON.mesage, "danger");
                        }
                    });

                },
                PopupSettingProduct: async function (url, productSettings) {
                    var self = this;
                    document.getElementById('model-setting').src = url;
                    document.getElementById("model-setting").addEventListener('load', (e) => {
                        self.dataSetting.model = e.target.model;
                        for (var m of e.target.model.materials) {
                            m.setAlphaMode("OPAQUE");
                        }

                    });
                    self.dataSetting.productSettings = productSettings;
                    self.dataSetting.productSettingID = productSettings[0].productSettingID;


                    await self.GetProductSettings();

                },
                SettingProduct: async function () {
                    var self = this;

                    console.log(this.dataSetting.materials);
                    if(!self.dataSetting.productPartNameCustom){
                        ShowAlert('Vui lòng nhập tên hiển thị','danger');
                        return;
                    }
                    if (!self.dataSetting.nameMaterialDefault) {
                        ShowAlert('Vui lòng nhập tên chất liệu mặc định','danger');
                        return;
                    }

                    var formData = new FormData();
                    formData.append('productSettingID', self.dataSetting.productSettingID);
                    formData.append('productPartNameCustom', self.dataSetting.productPartNameCustom);
                    formData.append('isDefault', self.dataSetting.isDefault);
                    formData.append('nameMaterialDefault', self.dataSetting.nameMaterialDefault);
                    for (var i = 0; i < self.dataSetting.materials.length; i++) {
                        formData.append(`materials[${i}]`, self.dataSetting.materials[i]);
                    }


                    self.dataSetting.isLoad = true;
                    $.ajax({
                        url: '/admin/SettingProduct',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (res) {
                            self.dataSetting.isLoad = false;
                            if (res.status == 1) {
                                ShowAlert(res.message, "success");

                                $('#modalSetting').modal('hide');
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }

                        },
                        error: function (error) {
                            self.dataSetting.isLoad = false;
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },

            },
            mounted() {
                this.init();
            },
        });

    </script>

}