@{
    Layout = "_LayoutAdmin";
}
<div id="appOrder">
    @*  <div class="row align-items-end">
    <div class="col-md-3 mb-3">
    <label>Mã đơn hàng:</label>
    <input type="text" class="form-control" v-model="orderID" placeholder="Nhập mã đơn hàng...">
    </div>
    <div class="col-md-3 mb-3">
    <label>Tên người nhận:</label>
    <input type="text" class="form-control" v-model="accountName" placeholder="Nhập tên người nhận...">
    </div>

    <div class="col-md-2 mb-3">
    <button class="btn btn-success" style="width: 120px;" v-on:click="GetOrders()">Tìm kiếm</button>
    </div>
    </div> *@

    <div style="overflow-x: auto">
        <table class="table table-bordered" style="vertical-align: middle; text-align:center;">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Mã đơn hàng</th>
                    <th scope="col">Mô tả</th>
                    <th scope="col">Tổng tiền</th>
                    <th scope="col">Số tiền phải trả</th>
                    <th scope="col">Trạng thái</th>
                    <th scope="col">Ngày tạo</th>
                    <th scope="col">Cập nhật lúc</th>
                </tr>
            </thead>
            <tbody style="vertical-align:middle;" class="text-dark">
                <tr v-if="isLoad">
                    <td style="font-size: 35px; text-align:center;" colspan="9"><i class="fa-solid fa-spinner fa-spin-pulse"></i></td>
                </tr>
                <tr v-if="isLoad == false" v-for="(item,index) in dataTable">
                    <td>{{item.orderID}}</td>
                    <td>{{item.description}}</td>
                    <td>{{Number(item.basePrice).toLocaleString('en-US')}}</td>
                    <td>{{Number(item.netPrice).toLocaleString('en-US')}}</td>

                    <td>
                        <span class="badge badge-warning" v-if="item.status==0">Chờ thanh toán</span>
                        <span class="badge badge-success" v-if="item.status==1">Thành công</span>
                        <span class="badge badge-danger" v-if="item.status==2">Đã hủy</span>
                        <span class="badge badge-primary" v-if="item.status==3">Hoàn tiền</span>

                    </td>
                    <td>{{formatDateDisplay(item.createAt)}}</td>
                    <td>{{formatDateDisplay(item.updateAt)}}</td>

                </tr>
            </tbody>
        </table>
        <div class="d-flex justify-content-center mt-3" id="div-pagination">
        </div>
    </div>



</div>





@section Scripts {
    <script>

        var appOrder = new Vue({
            el: "#appOrder",
            data: {
                resData: [],
                dataTable: [],
                isLoad: true,
                status: 0,
                accountName: "",
                orderID: "@Html.Raw(ViewBag.orderID)",
                totalPages: 1,
                pageSize: 15,
                dataUpdate: {
                    name: "",
                    messageName: "",
                    address: "",
                    messageAddress: "",
                    phoneNumber: "",
                    messagePhoneNumber: "",
                    message: "",
                    messageMessage: "",
                    transportFee: "",
                    messageTransportFee: "",
                    netPrice: "",
                    messageNetPrice: "",
                    status: 0,
                    isLoad: false,
                    orderID: ""

                },
                tableDetail: [],
                isLoadDetail: false


            },
            methods: {
                init: async function () {

                    await this.GetOrders();

                    this.$forceUpdate();
                },
                GetOrders: async function () {
                    var self = this;
                    self.isLoad = true;
                    self.dataTable = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/admin/GetOrders",
                        data: JSON.stringify({
                            accountName: self.accountName,
                            orderID: self.orderID
                        }),
                        success: function (res) {
                            self.isLoad = false;
                            if (res.status == 1) {
                                self.resData = res.data;
                                self.dataTable = self.resData.slice(0, self.pageSize);
                                self.totalPages = Math.ceil(self.resData.length / self.pageSize);
                                if (self.resData.length > 0) {
                                    document.getElementById("div-pagination").innerHTML = `<ul id="pagination" class="pagination-md"></ul>`;
                                    $('#pagination').twbsPagination({
                                        totalPages: self.totalPages,
                                        visiblePages: 6,
                                        first: "Trang đầu",
                                        last: "Trang cuối",
                                        next: 'Trang tiếp',
                                        prev: 'Trang trước',
                                        onPageClick: function (event, page) {
                                            var start = (page - 1) * self.pageSize;
                                            var end = page * self.pageSize;
                                            self.dataTable = self.resData.slice(start, end);
                                        }
                                    });
                                }
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            self.isLoad = false;
                            ShowAlert(error, "danger");
                        }
                    });

                },
                formatDateDisplay: function (inputDateString) {
                    if (!inputDateString) {
                        return "";
                    }

                    // Tạo một đối tượng Date từ chuỗi đầu vào
                    var inputDate = new Date(inputDateString);

                    // Lấy các thông tin thời gian từ đối tượng Date
                    var hours = inputDate.getHours().toString().padStart(2, '0');
                    var minutes = inputDate.getMinutes().toString().padStart(2, '0');
                    var seconds = inputDate.getSeconds().toString().padStart(2, '0');
                    var day = inputDate.getDate().toString().padStart(2, '0');
                    var month = (inputDate.getMonth() + 1).toString().padStart(2, '0'); //Tháng trong JavaScript bắt đầu từ 0, nên cần cộng thêm 1
                    var year = inputDate.getFullYear();


                    if (isNaN(day) || isNaN(month) || isNaN(year)) {
                        return '';
                    }


                    var formattedDate = `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
                    return formattedDate;
                },
                PopupUpdate: function (order) {
                    this.dataUpdate.name = order.name;
                    this.dataUpdate.address = order.address;
                    this.dataUpdate.phoneNumber = order.phoneNumber;
                    this.dataUpdate.message = order.message;
                    this.dataUpdate.transportFee = order.transportFee;
                    this.dataUpdate.netPrice = order.netPrice;
                    this.dataUpdate.status = order.status;
                    this.dataUpdate.orderID = order.orderID;
                },
                ViewDetail: async function (id) {
                    var self = this;
                    self.isLoadDetail = true;
                    self.tableDetail = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/admin/GetOrderItems",
                        data: JSON.stringify({
                            ID: id
                        }),
                        success: function (res) {
                            self.isLoadDetail = false;
                            if (res.status == 1) {
                                self.tableDetail = res.data;

                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            self.isLoadDetail = false;
                            ShowAlert(error, "danger");
                        }
                    });

                },
                UpdateOrder: async function () {
                    var self = this;

                    if (!self.dataUpdate.name) {
                        self.dataUpdate.messageName = "Vui lòng điền tên người nhận";
                        return;
                    }
                    else {
                        self.dataUpdate.messageName = "";
                    }
                    if (!self.dataUpdate.address) {
                        self.dataUpdate.messageAddress = "Vui lòng điền địa chỉ người nhận";
                        return;
                    }
                    else {
                        self.dataUpdate.messageAddress = "";
                    }
                    if (!self.dataUpdate.phoneNumber) {
                        self.dataUpdate.messagePhoneNumber = "Vui lòng điền số điện thoại người nhận";
                        return;
                    }
                    else {
                        self.dataUpdate.messagePhoneNumber = "";
                    }
                    if (!self.dataUpdate.transportFee || isNaN(self.dataUpdate.transportFee)) {
                        self.dataUpdate.messageTransportFee = "Vui lòng chỉ nhập số.";
                        return;
                    }
                    else {
                        self.dataUpdate.messageTransportFee = "";
                    }
                    if (!self.dataUpdate.netPrice || isNaN(self.dataUpdate.netPrice)) {
                        self.dataUpdate.messageNetPrice = "Vui lòng chỉ nhập số.";
                        return;
                    }
                    else {
                        self.dataUpdate.messageNetPrice = "";
                    }

                    self.dataUpdate.isLoad = true;
                    $.ajax({
                        url: '/admin/UpdateOrder',
                        type: 'POST',
                        data: JSON.stringify({
                            orderID: self.dataUpdate.orderID,
                            status: self.dataUpdate.status,
                            netPrice: self.dataUpdate.netPrice,
                            address: self.dataUpdate.address,
                            phoneNumber: self.dataUpdate.phoneNumber,
                            transportFee: self.dataUpdate.transportFee,
                            message: self.dataUpdate.message,
                            name: self.dataUpdate.name,


                        }),
                        contentType: "application/json; charset=utf-8",
                        success: function (res) {
                            self.dataUpdate.isLoad = false;
                            if (res.status == 1) {
                                self.GetOrders();
                                ShowAlert(res.message, "success");
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                            $('#modalUpdate').modal('hide');

                        },
                        error: function (error) {
                            self.dataUpdate.isLoad = false;
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },






            },
            mounted() {
                this.init();
            },
        });
    </script>

}