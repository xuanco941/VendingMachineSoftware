<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StyleX - Thiết kế</title>
    <link rel="icon" href="/logo/stylex-high-resolution-logo.ico" type="image/png">


    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
            crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
          integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">


    <link rel="stylesheet" href="/css/design.css">
</head>

<body class="bg-color text-white">
    <div class="container-fluid">
        <div class="row gx-2">
            <div class="col-12 col-md-3 col-lg-3 col-xl-2 mb-3 mb-md-0" style="height: 100vh; cursor: default;">
                <div id="appSelectModel" style="height: calc(65% - 32px); padding-bottom: 8px;">
                    <div style="min-height:50%; max-height:50%; overflow-y: auto;overflow-x:hidden;" class="px-2 py-1">
                        <h6 class="text-center mt-3 mb-0" style="color: #ccc; height: 30px;">THIẾT KẾ CỦA BẠN</h6>
                        <div class="row g-1 pb-1" style="font-size: 16px;max-height: calc(100% - 30px);">
                            <div v-if="isLoad1" class="d-flex justify-content-center align-items-center w-100"
                                 style="height: 100px;">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                            <div class="col-3 col-md-4 product product-cart" style="position: relative" v-if="isLoad1==false && cartItems" v-for="item in cartItems" v-bind:value="item.cartItemID">
                                <a v-bind:href="'/design?id='+item.cartItemID" style="text-decoration:none;" class="d-flex justify-content-center align-item-center">
                                    <img style="height: 90px;" v-bind:src="item.posterUrl" alt="" srcset="">
                                    @*                                     <div class="text-center text-white" style="font-size:12px;">{{item.product.name}}</div>
                                    *@
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="border-top my-2"></div>

                    <div style="min-height:50%; max-height:50%; overflow-y: auto; overflow-x:hidden;" class="px-2 py-1">
                        <h6 class="text-center mt-3 mb-0" style="color: #ccc; height: 30px;">TẤT CẢ MẪU</h6>
                        <div class="row g-1 pb-1" style="font-size: 16px;max-height: calc(100% - 30px);">
                            <div v-if="isLoad2" class="d-flex justify-content-center align-items-center w-100"
                                 style="height: 100px;">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                            <div class="col-3 col-md-4 product d-flex justify-content-center align-item-center" style="position: relative" v-if="isLoad2==false && products" v-for="item in products">
                                <img style="height: 90px;" v-bind:src="item.posterUrl" alt="" srcset="">
                                <button style="font-size:10.5px; padding: 0.2rem 0.35rem;" class="btn btn-primary btnDesignModel" v-on:click="AddCart(item.productID)">Thêm design</button>
                                @*                                 <div class="text-center" style="font-size:12px;">{{item.name}}</div>
                                *@
                            </div>
                        </div>
                    </div>


                </div>
                <div class="border-top my-2"></div>
                <div id="appBackground" style="height: calc(35%); padding-bottom: 8px;">
                    <div style="height: 70px;">
                        <h6 class="text-center my-2" style="color: #ccc;">BACKGROUND</h6>
                        <ul class="nav nav-pills mb-2 d-flex justify-content-between" id="pills-tab" role="tablist">
                            <li class="nav-item" style="width: 48%;" role="presentation">
                                <button style="font-size: 11px; letter-spacing: 1px;"
                                        class="w-100 nav-link active button-universe mt-1 mb-1" data-bs-toggle="pill"
                                        data-bs-target="#pills-background-image" type="button" role="tab"
                                        aria-controls="pills-background-image" aria-selected="false">
                                    Hình ảnh
                                </button>
                            </li>
                            <li class="nav-item" style="width: 48%;" role="presentation">
                                <button style="font-size: 11px; letter-spacing: 1px;"
                                        class="w-100 nav-link button-universe mt-1 mb-1" data-bs-toggle="pill"
                                        data-bs-target="#pills-background-color" type="button" role="tab"
                                        aria-controls="pills-background-color" aria-selected="true">
                                    Đơn màu
                                </button>
                            </li>
                        </ul>
                    </div>
                    <div class="tab-content" id="pills-tabContent"
                         style="overflow-y: auto;max-height: calc(100% - 70px);">
                        <div class="tab-pane fade show active" id="pills-background-image" role="tabpanel">
                            <div class="form-check form-switch d-flex align-items-center justify-content-start p-0">
                                <input class="form-check-input mt-0 mx-0" type="checkbox" v-model="typeImage"
                                       id="stToanCanh" v-on:change="ChangeTypeImage()">
                                <label class="form-check-label mx-1" for="stToanCanh" style="font-size: 10px;">
                                    Toàn
                                    cảnh
                                </label>
                            </div>
                            <div class="input-group input-group-sm mb-1">
                                <input style="box-shadow: none;" type="text" class="form-control form-control-sm"
                                       placeholder="Tìm kiếm hình ảnh" aria-describedby="button-search-image-bg"
                                       v-model="querySearch" v-on:keyup.enter="SearchImages()">
                                <button class="btn btn-outline-primary" type="button" id="button-search-image-bg"
                                        v-on:click="SearchImages()">
                                    <i class="fa-solid fa-magnifying-glass"></i>
                                </button>
                            </div>
                            <div class="row mt-2 w-100 justify-content-center mx-0">
                                <div v-if="loadingImage" class="d-flex justify-content-center align-items-center w-100"
                                     style="height: 100px;">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                                <img v-if="!loadingImage" style="max-width: 100%;" class="col-3 px-1 py-1 product"
                                     v-for="(url,index) in listImages" v-bind:src="url" v-bind:alt="index"
                                     v-on:click="ChangeImage(url)">
                            </div>
                        </div>
                        <div class="tab-pane fade" id="pills-background-color" role="tabpanel">
                            <input style="height: 100px;" type="color" class="form-control form-control-color w-100"
                                   title="Chọn màu nền" v-on:input="ChangeBackground(0)" v-model="data.background">
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-5 col-lg-6 col-xl-8 p-1" style="height: 100vh;">
                <div class="d-flex justify-content-between" style="height:40px;">
                    <div class="d-flex">
                        <a href="/" style="font-size: 26px; color: #75a4e9; font-weight: 500; text-decoration: none;">StyleX</a>
                    </div>
                    <div class="d-flex" id="appFeatures" style="overflow-x:auto; overflow-y:hidden;">
                        <button class="btn btn-success mx-2 my-1 d-flex align-items-center" style="font-size: 14px;" v-on:click="Save()">Lưu lại <i style="margin-left:6px;" class="fa-solid fa-file-arrow-down"></i></button>
                        <button class="btn btn-primary mx-2 my-1 d-flex align-items-center" style="font-size: 14px;" data-bs-toggle="modal" data-bs-target="#qrshare">Chia sẻ <i style="margin-left:6px;" class="fa-solid fa-share"></i></button>
                        <!-- Modal -->
                        <div class="modal fade" id="qrshare" tabindex="-1" aria-labelledby="qrshareLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">

                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div v-if="productIDSelected" class="modal-body d-flex justify-content-center flex-wrap">
                                        <a class="d-block text-primary mb-1" v-bind:href="linkView" target="_blank">{{linkView}}</a>
                                        <div id="qrcode"></div>
                                    </div>
                                    <div v-if="!productIDSelected" class="modal-body d-flex justify-content-center flex-wrap text-dark">
                                        Vui lòng chọn mô hình...
                                    </div>

                                </div>
                            </div>
                        </div>
                        <button class="btn btn-info mx-2 my-1 d-flex align-items-center" style="font-size: 14px;" v-on:click="captureModel()">Chụp ảnh <i style="margin-left:6px;" class="fa-solid fa-camera"></i></button>
                        <button class="btn btn-warning mx-2 my-1 d-flex align-items-center" style="font-size: 14px;" v-on:click="exportGLB()">Tải về <i style="margin-left:6px;" class="fa-solid fa-download"></i></button>
                        <button class="btn btn-light mx-2 my-1 d-flex align-items-center" style="font-size: 14px;" data-bs-toggle="modal" data-bs-target="#question">Hướng dẫn <i style="margin-left:6px;" class="fa-solid fa-question"></i></button>
                        <!-- Modal -->
                        <div class="modal fade" id="question" tabindex="-1" aria-labelledby="qrshareLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title text-dark">Hướng dẫn</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body" style="color:black;">
                                        <h6>Thông tin sản phẩm</h6>
                                        <div v-if="productIDSelected">
                                            <div v-for="item in listPartProduct">
                                                <div>
                                                    {{item.nameCustom}}: chất liệu mặc định trên mô hình là loại {{item.nameMaterialDefault}}, có thể thay đổi bởi {{item.materials.length+1}} loại khác nhau(
                                                    <span v-if="item.materials.length > 0 && item.materials[0]" v-for="m in item.materials">{{m.name + ', '}}</span>{{item.nameMaterialDefault}})
                                                </div>
                                            </div>
                                        </div>
                                        <div v-if="!productIDSelected" class="d-flex justify-content-center flex-wrap text-dark">
                                            Vui lòng chọn mô hình...
                                        </div>
                                        <h6 class="mt-2">Hướng dẫn sử dụng</h6>
                                        <div>
                                            1.Bạn có thể chọn màu sắc và họa tiết của từng bộ phận trên sản phẩm thông qua hình ảnh có sẵn hoặc ảnh của bạn trong mục màu sắc.
                                            <br>
                                            2.Bạn có thể chọn chất liệu của từng bộ phận trên sản phẩm trong mục chất liệu.
                                            <br>
                                            3.Bạn có thể dán hình ảnh hoặc chữ lên sản phẩm trong mục dán hình.
                                            <br>
                                            4.Chúng tôi luôn hỗ trợ bạn bất cứ lúc nào qua, vui lòng để lại lời nhắn cho chúng tôi qua <a href="https://facebook.com/xuanco941" target="_blank">facebook này</a>
                                        </div>
                                        <h6 class="mt-2">Xem AR</h6>
                                        <div>
                                            Bạn cần sử dụng thiết bị hỗ trợ AR để truy cập tính năng này.
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <div id="hide-model-main" style="display: none; justify-content: center; align-items: center; height: calc(100% - 40px);">
                    <h1>
                        Vui lòng chọn mẫu
                    </h1>
                </div>
                <model-viewer id="model-main" class="w-100" alt="" style="height: calc(100% - 40px);"
                              ar shadow-intensity="1" camera-controls disable-pan
                              disable-tap autoplay shadow-softness="0.1" min-camera-orbit="auto auto 50%"
                              max-camera-orbit="auto auto 300%">
                </model-viewer>
            </div>
            <div class="col-12 col-md-4 col-lg-3 col-xl-2 mt-3 mt-md-0 py-1"
                 style="height: 100vh; max-height: 100vh; cursor: default; overflow-y: auto;">
                <div class="tab-content" style="max-height: calc(100% - 36px);">
                    <div id="nav-design">

                        <div class="flex-shrink-0 w-100" id="appDesign">
                            <div>
                                <label for="selectPositionModel" class="form-label" style="font-size: 0.9rem;">
                                    Chọn
                                    bộ phận thao tác:
                                </label>
                                <select id="selectPositionModel" class="form-select" v-model="materialSelectedName"
                                        v-on:change="Select()">
                                    <option v-for="mat in listPartProduct" v-bind:value="mat.nameDefault">
                                        {{mat.nameCustom}}
                                    </option>
                                </select>
                                <div class="form-check form-switch d-flex align-items-center justify-content-start p-0 mt-1">
                                    <input class="form-check-input mt-0 mx-0" type="checkbox"
                                           v-model="isNotHidePositionOther" id="hideOther" v-on:change="Select()">
                                    <label class="form-check-label mx-1" for="hideOther" style="font-size: 13px;">
                                        Không
                                        ẩn bộ phận khác
                                    </label>
                                </div>
                            </div>
                            <ul class="list-unstyled ps-0 mt-4" style="height:calc(100% - 140px)">
                                <li class="mb-3">
                                    <button class="btn btn-toggle align-items-center rounded collapsed btn-c"
                                            data-bs-toggle="collapse" data-bs-target="#color-collapse" value="color-collapse"
                                            aria-expanded="true">
                                        Màu sắc
                                    </button>
                                    <div class="collapse show mt-2 collapse-div" id="color-collapse"
                                         style="padding-left: 1.5rem; max-height: 100%; overflow-y: auto; overflow-x: hidden;">
                                        <div class="d-flex align-items-center">
                                            <input v-model="dataChangeColor.color" v-on:input="ChangeColor()" type="color"
                                                   class="form-control form-control-color product"
                                                   id="colorDesignInput" style="height:60px; width:100px;">
                                            <label class="mx-2" style="font-size: 0.9rem;">Màu của vải</label>
                                        </div>
                                        <div class="border-top my-3"></div>
                                        <div>
                                            <div class="d-flex align-items-center justify-content-start">
                                                <div class="d-flex align-items-center">
                                                    <input hidden type="file" id="uploadImgColor" accept="image/*"
                                                           v-on:change="GetUrlFileUploadChangeColor">
                                                    <label for="uploadImgColor" style="height:60px;" role="button">
                                                        <img v-bind:src="dataChangeColor.imageTexture" class="w-100 h-100 product"
                                                             style="border-radius: 5px;">
                                                    </label>
                                                    <label class="mx-2" style="font-size: 0.9rem;">
                                                        Họa tiết
                                                    </label>
                                                </div>
                                                <button class="btn btn-danger px-2 py-1" style="font-size:14px; margin-left:15px;" v-on:click="TextureDefault()">Reset họa tiết</button>
                                            </div>

                                            <div class="row mt-2">
                                                <div class="col-12">
                                                    <label for="scaleIp" class="form-label m-0"
                                                           style="font-size: 14px;">Kích thước họa tiết</label>
                                                    <div class="position-relative d-flex flex-nowrap align-items-center"
                                                         style="padding-right: 5px;">
                                                        <span class="position-absolute"
                                                              style="font-size: 12px; bottom: -9px; left: 0px;">0</span>
                                                        <input v-on:change="ChangeScaleTexture()"
                                                               v-model="dataChangeColor.scaleTexture" type="range" class="form-range"
                                                               min="0" max="1" step="0.001" id="scaleIp">
                                                        <span class="position-absolute"
                                                              style="font-size: 12px; bottom: -9px; right: 64px;">1</span>
                                                        <input class="from-control form-control-sm text-center" step="0.001"
                                                               disabled readonly
                                                               style="width: 50px; font-size: 14px; margin-left: 9px;color: #ffffff; padding: 1px; background-color:#5f5f5f;"
                                                               type="text" max="1" min="0" v-on:change="ChangeScaleTexture()"
                                                               v-bind:value="dataChangeColor.scaleTexture">
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="mt-4">
                                                <div class="input-group input-group-sm mb-1">
                                                    <input style="box-shadow: none;" type="text"
                                                           class="form-control form-control-sm"
                                                           placeholder="Tìm kiếm hình ảnh"
                                                           aria-describedby="button-search-image-bg" v-model="dataChangeColor.querySearch"
                                                           v-on:keyup.enter="SearchImageChangeColor()">
                                                    <button class="btn btn-outline-primary" type="button"
                                                            id="button-search-image-bg" v-on:click="SearchImageChangeColor()">
                                                        <i class="fa-solid fa-magnifying-glass"></i>
                                                    </button>
                                                </div>
                                                <div class="row mt-2 w-100 justify-content-center mx-0" style="max-height: 300px; overflow-y:auto">
                                                    <div v-if="dataChangeColor.loadingImage"
                                                         class="d-flex justify-content-center align-items-center w-100"
                                                         style="height: 100px;">
                                                        <div class="spinner-border" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                    </div>
                                                    <img v-if="!dataChangeColor.loadingImage" style="max-width: 100%;"
                                                         class="col-3 px-1 py-1 product"
                                                         v-for="(url,index) in dataChangeColor.listImages" v-bind:src="url"
                                                         v-bind:alt="index" v-on:click="ChangeTexture(url)">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li class="mb-3">
                                    <button class="btn btn-toggle align-items-center rounded collapsed btn-c"
                                            data-bs-toggle="collapse" data-bs-target="#metallic-roughness-collapse" value="metallic-roughness-collapse"
                                            aria-expanded="false">
                                        Chất liệu
                                    </button>
                                    <div id="metallic-roughness-collapse" class="collapse collapse-div" style="margin-left: 1.5rem; min-height:100px; max-height:100%; overflow-y: auto; overflow-x: hidden;">

                                        <div v-if="dataChangeMaterial.loadingMaterial" class="spinner-border mt-4" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <div v-if="!dataChangeMaterial.loadingMaterial" class="radio-button-container pt-2 px-1" style=" display: block;">
                                            <div class="radio-button" style="height: 40px;">
                                                <input type="radio" class="radio-button__input"
                                                       v-on:change="changeMaterial(null)"
                                                       id="radio-change-r-default" name="radio-change-metallic-roughness" value="" v-model="dataChangeMaterial.matSelected">
                                                <label class="radio-button__label" for="radio-change-r-default">
                                                    <span class="radio-button__custom"></span>
                                                    <span>
                                                        <span>Mặc định({{partProductSelected.nameMaterialDefault}})</span>
                                                    </span>
                                                </label>
                                            </div>
                                            <div v-for="item in dataChangeMaterial.listMaterials"
                                                 class="radio-button d-flex align-items-center">
                                                <input type="radio" class="radio-button__input"
                                                       v-on:change="changeMaterial(item)"
                                                       v-bind:id="item.name" name="radio-change-metallic-roughness" v-bind:value="item.materialID" v-model="dataChangeMaterial.matSelected">
                                                <label class="radio-button__label" v-bind:for="item.name">
                                                    <span class="radio-button__custom" style="top: 9px;"></span>
                                                    <span class="d-flex align-items-center">
                                                        <span class="mx-1">{{item.name}}</span>
                                                        <img style="width: 30px;height: 30px;" v-bind:src="item.preview">
                                                        <span v-if="item.isDecal==false">(không hỗ trợ thay đổi họa tiết và dán hình)</span>
                                                    </span>
                                                </label>
                                            </div>

                                        </div>


                                    </div>
                                </li>
                                <li class="mb-3" id="appChangeDecal">
                                    <button class="btn btn-toggle align-items-center rounded collapsed btn-c"
                                            data-bs-toggle="collapse" data-bs-target="#decal-collapse" value="decal-collapse"
                                            aria-expanded="false">
                                        Dán hình
                                    </button>
                                    <div class="collapse collapse-div" id="decal-collapse" style="margin-left: 1.5rem;max-height:100%; overflow-y: auto; overflow-x: hidden;">
                                        <div>
                                            <div class="d-flex align-items-center justify-content-between mt-2">
                                                <div class="d-flex align-items-center">
                                                    <input hidden type="file" id="uploadImgDecal" accept="image/*"
                                                           v-on:change="GetUrlFileUploadChangeDecal">
                                                    <label for="uploadImgDecal" style="height:60px;" role="button">
                                                        <img v-bind:src="dataChangeDecal.image" class="product"
                                                             style="border-radius: 5px; width:60px; height:60px;">
                                                    </label>
                                                    <label class="mx-2" style="font-size: 0.9rem;">
                                                        Ảnh dán
                                                    </label>
                                                </div>
                                                <div class="d-flex align-items-center">
                                                    <button class="btn btn-primary mx-1" style="font-size:14px; padding: 4px 8px" v-if="!dataChangeDecal.isActive" v-on:click="StartDecal()">Bắt đầu dán</button>
                                                    <button class="btn btn-danger mx-1" style="font-size:14px; padding: 4px 8px" v-if="dataChangeDecal.isActive" v-on:click="StopDecal()">Ngừng dán</button>

                                                    <button class="btn btn-warning mx-1" style="font-size:14px;padding: 4px 8px" v-on:click="DeleteDecalNewest()">Xóa</button>
                                                </div>


                                            </div>
                                            <div class="row mt-2">
                                                <div class="col-12">
                                                    <label for="sizeI" class="form-label m-0"
                                                           style="font-size: 14px;">Kích thước ảnh dán (cm)</label>
                                                    <div class="position-relative d-flex flex-nowrap align-items-center"
                                                         style="padding-right: 5px;">
                                                        <span class="position-absolute"
                                                              style="font-size: 12px; bottom: -9px; left: 0px;">{{dataChangeDecal.sizePercentMin}}</span>
                                                        <input v-model="dataChangeDecal.sizePercent" type="range" class="form-range"
                                                               v-bind:min="dataChangeDecal.sizePercentMin" v-bind:max="dataChangeDecal.sizePercentMax" v-bind:step="dataChangeDecal.sizePercentStep" id="sizeI">
                                                        <span class="position-absolute"
                                                              style="font-size: 12px; bottom: -9px; right: 64px;">{{dataChangeDecal.sizePercentMax}}</span>
                                                        <input class="from-control form-control-sm text-center"
                                                               disabled readonly
                                                               style="width: 50px; font-size: 14px; margin-left: 9px;color: #ffffff; padding: 1px; background-color:#5f5f5f;"
                                                               type="text" v-bind:value="dataChangeDecal.sizePercent">
                                                    </div>
                                                </div>
                                                <div class="col-12 mt-2">
                                                    <label class="form-label m-0"
                                                           style="font-size: 14px;">Xoay ảnh</label>
                                                    <div class="position-relative d-flex flex-nowrap align-items-center"
                                                         style="padding-right: 5px;">
                                                        <span class="position-absolute"
                                                              style="font-size: 12px; bottom: -9px; left: 0px;">0</span>
                                                        <input v-model="dataChangeDecal.rotation" type="range" class="form-range"
                                                               min="0" max="360" step="1" v-on:change="ChangeImageDecal(dataChangeDecal.imageSelect)">
                                                        <span class="position-absolute"
                                                              style="font-size: 12px; bottom: -9px; right: 64px;">360</span>
                                                        <input class="from-control form-control-sm text-center"
                                                               disabled readonly
                                                               style="width: 50px; font-size: 14px; margin-left: 9px;color: #ffffff; padding: 1px; background-color:#5f5f5f;"
                                                               type="text" v-bind:value="dataChangeDecal.rotation">
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="mt-4">
                                                <div class="input-group input-group-sm mb-1">
                                                    <input style="box-shadow: none;" type="text"
                                                           class="form-control form-control-sm"
                                                           placeholder="Tìm kiếm hình ảnh"
                                                           aria-describedby="button-search-image-bg" v-model="dataChangeDecal.querySearch"
                                                           v-on:keyup.enter="SearchImageChangeDecal()">
                                                    <button class="btn btn-outline-primary" type="button"
                                                            id="button-search-image-bg" v-on:click="SearchImageChangeDecal()">
                                                        <i class="fa-solid fa-magnifying-glass"></i>
                                                    </button>
                                                </div>
                                                <div class="row mt-2 w-100 justify-content-center mx-0" style="max-height: 160px; overflow-y:auto">
                                                    <div v-if="dataChangeDecal.loadingImage"
                                                         class="d-flex justify-content-center align-items-center w-100"
                                                         style="height: 100px;">
                                                        <div class="spinner-border" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                    </div>
                                                    <img v-if="!dataChangeDecal.loadingImage" style="max-width: 100%;"
                                                         class="col-3 px-1 py-1 product"
                                                         v-for="(url,index) in dataChangeDecal.listImages" v-bind:src="url"
                                                         v-bind:alt="index" v-on:click="ChangeImageDecal(url)">
                                                </div>
                                            </div>
                                            <div class="border-top my-2"></div>
                                            <h6 class="text-center mb-1" style="color: #ccc; height: 25px;">Dán chữ</h6>

                                            <div class="d-flex flex-nowrap align-items-center mb-1">
                                                <label class="form-label m-0"
                                                       style="font-size: 14px; width: 100px;">Màu chữ: </label>
                                                <input v-model="dataChangeDecal.textColor" type="color"
                                                       class="form-control form-control-color product"
                                                       style="height:30px; width:100%;">
                                            </div>
                                            <div class="d-flex flex-nowrap align-items-center mb-1">
                                                <label class="form-label m-0"
                                                       style="font-size: 14px; width: 100px;">Font-size: </label>
                                                <input v-model="dataChangeDecal.textFontSize" type="number"
                                                       class="form-control form-control-color product"
                                                       style="height:30px; width:100%;" placeholder="Font size">
                                            </div>

                                            <div class="input-group input-group-sm mb-1">
                                                <input style="box-shadow: none;" type="text"
                                                       class="form-control form-control-sm"
                                                       placeholder="Nội dung dán"
                                                       aria-describedby="button-text-image" v-model="dataChangeDecal.textDecal" v-on:keyup.enter="GenerateImageTextDecal()">
                                                <button class="btn btn-outline-primary" type="button"
                                                        v-on:click="GenerateImageTextDecal()">
                                                    <i class="fa-solid fa-camera"></i>
                                                </button>
                                            </div>
                                            <div class="row mt-2 mw-100 justify-content-start mx-0 flex-nowrap" style="overflow-x:auto">
                                                <img class="px-1 py-1 product" style="width: 80px; height:80px;" v-for="url in dataChangeDecal.listTextDecals" v-bind:src="url" v-on:click="ChangeImageDecal(url)" />
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div id="alertBox" style="max-width: 400px; position:fixed; bottom: 15px; right: 20px; margin: 0px; opacity: 0.95; z-index: 555; padding: 15px 20px; font-size: 17px;">
    </div>
    <canvas hidden id="myCanvas" width="200" height="200" style="background-color: transparent">
    </canvas>


    <!-- loader -->
    <div id="screen-loader" style="z-index:10000;position:fixed;padding: 0px; left: 0; top: 0; width:100%;height:100%; transform: none; background-color: rgba(0,0,0,0.3); display:none;justify-content:center;align-items:center;">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <script src="/library/js/jquery.min.js"></script>

    <!--vue2 development-->
    <!--<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>-->
    <!--vue2 production-->
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>

    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@@^0.158.0/build/three.module.js",
                "three/addons/": "https://unpkg.com/three@@^0.158.0/examples/jsm/"
            }
        }
    </script>
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js">
    </script>

    <script type="module">
        import * as THREE from 'three';
        import { DecalGeometry } from 'three/addons/geometries/DecalGeometry.js';
        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { SearchImages } from '/js/search-image.js';
        // console.log(await SearchImages('cat', 10, 1));

        const screenLoader = document.getElementById('screen-loader');
        function ShowLoader() {
            screenLoader.style.display = 'flex';
        };
        function HideLoader() {
            screenLoader.style.display = 'none';
        };

        function hexToRgb(hex) {

            if (!hex) {
                return null;
            }

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
        function rgbToLinearRGB(rgb) {
            // Chuẩn hóa giá trị màu từ 0-255 về 0-1
            const linearRGB = rgb.map(val => val / 255.0);

            // Chuyển đổi không gian màu sRGB sang không gian màu tuyến tính
            const linearized = linearRGB.map(val => {
                if (val <= 0.04045) {
                    return val / 12.92;
                } else {
                    return Math.pow((val + 0.055) / 1.055, 2.4);
                }
            });

            return { r: linearized[0], g: linearized[1], b: linearized[2] };
        }


        //check image upload
        function isFileImage(file) {
            return file && file['type'].split('/')[0] === 'image';
        }
        //alert
        var timeoutAlertID;
        function ShowAlert(html, type) {
            var alertBox = document.querySelector('#alertBox');
            var alert = `<div class="alert alert-${type} alert-dismissible" role="alert"><button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>${html}</div>`;

            if (timeoutAlertID) {
                alertBox.innerHTML = '';
                clearTimeout(timeoutAlertID);
            }

            alertBox.innerHTML = alert;
            timeoutAlertID = setTimeout(function () {
                alertBox.innerHTML = '';
            }, 3500);
        };
        window.addEventListener('load', () => {
            var btnChangeMenu = Array.from(document.querySelectorAll('.btn-c'));
            var collapseDiv = Array.from(document.querySelectorAll('.collapse-div'));

            btnChangeMenu.forEach(b => {

                b.addEventListener('click', (e) => {
                    var value = b.getAttribute('value');

                    btnChangeMenu.forEach(bb => {
                        if (bb.getAttribute('value') == value) {
                            bb.setAttribute('aria-expanded', 'true');
                        }
                        else {
                            bb.setAttribute('aria-expanded', 'false');
                        }
                    })


                    collapseDiv.forEach(d => {
                        if (d.id == value) {
                            d.classList.add('show');
                        }
                        else {
                            d.classList.remove('show');
                        }
                    });
                })
            });
        });

        //xoay ảnh
        function rotateImage(url, degrees, callback) {
            var img = new Image();
            img.crossOrigin = 'Anonymous';

            img.onload = function () {
                var canvas = document.createElement('canvas');
                var ctx = canvas.getContext('2d');

                var radians = (degrees * Math.PI) / 180;

                var maxWidth = Math.abs(Math.cos(radians) * img.width) + Math.abs(Math.sin(radians) * img.height);
                var maxHeight = Math.abs(Math.sin(radians) * img.width) + Math.abs(Math.cos(radians) * img.height);

                canvas.width = maxWidth;
                canvas.height = maxHeight;

                ctx.translate(maxWidth / 2, maxHeight / 2);
                ctx.rotate(radians);

                ctx.drawImage(img, -img.width / 2, -img.height / 2);

                // Chuyển đổi canvas thành Blob
                canvas.toBlob(function (blob) {
                    // Tạo URL từ Blob
                    var rotatedImageUrl = URL.createObjectURL(blob);

                    // Gọi lại hàm callback với URL Blob
                    callback(rotatedImageUrl);
                }, 'image/png');
            };

            img.src = url;
        }
        async function imageURLToBlob(url) {
            return new Promise(function (resolve, reject) {
                var img = new Image();
                img.crossOrigin = 'Anonymous';

                img.onload = function () {
                    var canvas = document.createElement('canvas');
                    var ctx = canvas.getContext('2d');

                    canvas.width = img.width;
                    canvas.height = img.height;

                    ctx.drawImage(img, 0, 0);

                    // Convert canvas to Blob
                    canvas.toBlob(function (b) {
                        resolve(b);
                    }, 'image/png');
                };

                img.onerror = function (error) {
                    reject(error);
                };

                img.src = url;
            });
        }

        function isURL(str) {
            try {
                new URL(str);
                return true;
            } catch (error) {
                return false;
            }
        }


        var appBackground = new Vue({
            el: "#appBackground",
            data: {
                model: {},
                data: {},
                querySearch: '',
                listImages: [],
                typeImage: false,
                loadingImage: true
            },
            methods: {
                init: async function () {
                    var self = this;

                    this.data.type = 0; //2-toàn cảnh, 1-hình ảnh, 0 đơn màu
                    this.data.background = 'transparent';

                    document.getElementById("model-main").addEventListener('load', (e) => {
                        self.model = e.target;
                        self.ChangeBackground(self.data.type);
                    });

                    await this.SearchImages();

                    this.$forceUpdate();
                },
                SearchImages: async function () {
                    var self = this;
                    self.loadingImage = true;
                    var images = await SearchImages(self.querySearch, 28, 1);
                    if (images.length > 0) {
                        self.listImages = images.map(e => `https://images.unsplash.com/${e.url.trim()}?auto=format&fit=crop&w=500&h=500`);
                    }
                    self.loadingImage = false;
                },
                ChangeBackground: function (type) {
                    var self = this;

                    if (type == 2) self.data.type = 2;
                    else if (type == 1) self.data.type = 1;
                    else self.data.type = 0;

                    if (self.data.type == 0 && self.data.background) {
                        self.model.removeAttribute('skybox-image');
                        self.model.style.backgroundImage = 'none';
                        self.model.style.backgroundColor = self.data.background;
                    }
                    else if (self.data.type == 1 && self.data.background) {
                        self.model.removeAttribute('skybox-image');
                        self.model.style.backgroundImage = `url('${self.data.background}')`;
                        self.model.style.backgroundColor = 'transparent';
                    }
                    else if (self.data.type == 2 && self.data.background) {
                        self.model.setAttribute('skybox-image', self.data.background);
                        self.model.style.backgroundImage = 'none';
                        self.model.style.backgroundColor = 'transparent';
                    }
                    else {
                        self.model.removeAttribute('skybox-image');
                        self.model.style.backgroundImage = 'none';
                        self.model.style.backgroundColor = 'transparent';
                    }
                },
                ChangeImage: function (url) {
                    this.data.background = url;
                    this.ChangeTypeImage();
                },
                ChangeTypeImage: function () {
                    var type = this.typeImage == true ? 2 : 1;
                    this.ChangeBackground(type);
                }


            },
            mounted() {
                this.init();
            },
        });
        var appSelectModel = new Vue({
            el: "#appSelectModel",
            data: {

                cartItems: [],
                products: [],
                isLoad1: true,
                isLoad2: true,
                listPartProduct: [],

                productIDSelected: '@Html.Raw(ViewBag.id)', // id cartItem
                model: {},
                modelViewer: {},
                defaultMat: []

            },
            methods: {
                init: async function () {
                    var self = this;

                    await this.GetModels();


                    window.addEventListener('load', () => {
                        if (self.productIDSelected) {

                            //set về OPAQUE
                            document.getElementById("model-main").src = '@Html.Raw(ViewBag.src)';
                            document.getElementById("model-main").poster = '@Html.Raw(ViewBag.poster)';

                            document.getElementById("model-main").addEventListener('load', async (e) => {
                                self.modelViewer = e.target;
                                self.model = e.target.model;
                                for (var m of self.model.materials) {

                                    //get default mat
                                    var defaultObjMat = {};
                                    var qq = Object.getOwnPropertySymbols(m.pbrMetallicRoughness.metallicRoughnessTexture);
                                    var zz = m.pbrMetallicRoughness.metallicRoughnessTexture[qq.find(e2 => e2.description === 'materials')];
                                    zz.forEach(a => {
                                        defaultObjMat = { ...a };
                                    });
                                    self.defaultMat.push({ name: m.name, defaultObjMat: defaultObjMat });

                                    console.log(self.defaultMat);


                                    m.nameMatSave = '';
                                    m.setAlphaMode("OPAQUE");
                                    m.pbrMetallicRoughness.setBaseColorFactor([m.pbrMetallicRoughness.baseColorFactor[0], m.pbrMetallicRoughness.baseColorFactor[1], m.pbrMetallicRoughness.baseColorFactor[2], 1]);

                                    //đặt về màu vải trắng nếu isDefault = true
                                    var partP = self.listPartProduct.find(z => z.nameDefault == m.name);
                                    if (partP && partP.isDefault == true) {
                                        var obj = Object.getOwnPropertySymbols(m.pbrMetallicRoughness.metallicRoughnessTexture);
                                        var mat = m.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e2 => e2.description === 'materials')];
                                        mat.forEach(a => {
                                            //map là màu sắc cơ bản của vật liệu mà không có thông tin về ánh sáng hoặc bóng
                                            a.map = null;
                                            a.color.r = 1;
                                            a.color.g = 1;
                                            a.color.b = 1;
                                            a.needsUpdate = true;
                                        });
                                    }
                                }

                                var isRunLoadTex = true;
                                //load design cũ
                                for (var productPart of self.listPartProduct) {
                                    if (!productPart.designInfo) {
                                        continue;
                                    }
                                    else {
                                        console.log(productPart);
                                        var productPartOnModel = self.model.materials.find(e => e.name == productPart.nameDefault);



                                        //name material
                                        productPartOnModel.nameMatSave = productPart.designInfo.nameMaterial;




                                        if (productPart.designInfo.nameMaterial) {
                                            var objz = Object.getOwnPropertySymbols(productPartOnModel.pbrMetallicRoughness.metallicRoughnessTexture);
                                            var matz = productPartOnModel.pbrMetallicRoughness.metallicRoughnessTexture[objz.find(e => e.description === 'materials')];
                                            matz.forEach(a => {
                                                // a.map = map;
                                                a.aoMap = productPart.designInfo.aoMap ? new THREE.TextureLoader().load(productPart.designInfo.aoMap) : a.aoMap;
                                                a.normalMap = productPart.designInfo.normalMap ? new THREE.TextureLoader().load(productPart.designInfo.normalMap) : a.normalMap;
                                                a.roughnessMap = productPart.designInfo.roughnessMap ? new THREE.TextureLoader().load(productPart.designInfo.roughnessMap) : a.roughnessMap;
                                                a.metalnessMap = productPart.designInfo.metalnessMap ? new THREE.TextureLoader().load(productPart.designInfo.metalnessMap) : a.metalnessMap;
                                                a.needsUpdate = true;
                                            });
                                        } else {
                                            var dMat = self.defaultMat.find(e => e.name == productPartOnModel.name);
                                            var objz = Object.getOwnPropertySymbols(productPartOnModel.pbrMetallicRoughness.metallicRoughnessTexture);
                                            var matz = productPartOnModel.pbrMetallicRoughness.metallicRoughnessTexture[objz.find(e => e.description === 'materials')];
                                            matz.forEach(a => {
                                                // a.map = map;
                                                a.aoMap = dMat.defaultObjMat.aoMap;
                                                a.normalMap = dMat.defaultObjMat.normalMap;
                                                a.roughnessMap = dMat.defaultObjMat.roughnessMap;
                                                a.metalnessMap = dMat.defaultObjMat.metalnessMap;
                                                a.needsUpdate = true;
                                            });
                                        }
                                        //họa tiết
                                        if (productPart.designInfo.imageTexture) {

                                            const texture = await self.modelViewer.createTexture(window.location.origin + productPart.designInfo.imageTexture);
                                            //change kết cấu
                                            productPartOnModel.normalTexture.setTexture(texture);
                                            //change màu kết cấu
                                            productPartOnModel.pbrMetallicRoughness['baseColorTexture'].setTexture(texture);

                                            if (isRunLoadTex) {
                                                appDesign.ChangeTexture(productPart.designInfo.imageTexture);
                                            }

                                        }
                                        isRunLoadTex = false;



                                        //màu
                                        productPartOnModel.pbrMetallicRoughness.setBaseColorFactor(productPart.designInfo.color);




                                        //set scale
                                        if (productPartOnModel.pbrMetallicRoughness['baseColorTexture'].texture) {
                                            productPartOnModel.pbrMetallicRoughness['baseColorTexture'].texture.sampler.setScale({ u: productPart.designInfo.textureScale, v: productPart.designInfo.textureScale });
                                            //set chế độ scale texture là ClampToEdge (0-1) //repeat = 10497
                                            productPartOnModel.pbrMetallicRoughness['baseColorTexture'].texture.sampler.setWrapS(33071);
                                            productPartOnModel.pbrMetallicRoughness['baseColorTexture'].texture.sampler.setWrapT(33071);
                                        }


                                    }
                                }
                            });

                            //set màu select cart
                            var cartIs = Array.from(document.querySelectorAll('.product-cart'));

                            cartIs.forEach(e => {
                                var value = e.getAttribute('value');
                                if (self.productIDSelected == value) {
                                    e.style.border = '1.5px solid #149CEA';
                                    e.style.backgroundColor = '#20a9f745';
                                    e.id = "product-cart-selected";
                                }
                            });


                        }
                        else {
                            document.getElementById("model-main").style.display = 'none';
                            document.getElementById("hide-model-main").style.display = 'flex';
                        }

                    });



                    this.$forceUpdate();
                },
                GetListCartItems: async function () {
                    var self = this;
                    self.cartItems = [];
                    self.products = [];
                    self.isLoad1 = true;
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Design/GetCartItems",
                        data: JSON.stringify({
                        }),
                        success: function (res) {
                            self.isLoad1 = false;
                            if (res.status == 1) {
                                self.cartItems = res.data;

                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            self.isLoad1 = false;
                        }
                    });
                },
                GetListProducts: async function () {
                    var self = this;
                    self.products = [];
                    self.isLoad2 = true;
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Design/GetProducts",
                        data: JSON.stringify({
                        }),
                        success: function (res) {
                            self.isLoad2 = false;
                            if (res.status == 1) {
                                self.products = res.data;
                                // if (self.cartItems) {
                                //     self.products = self.products.filter(function (e) {
                                //         return !self.cartItems.some(function (cartItem) {
                                //             return cartItem.productID == e.productID;
                                //         });
                                //     });
                                // }
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            ShowAlert(error, "danger");
                            self.isLoad2 = false;
                        }
                    });
                },
                GetModels: async function () {
                    var self = this;
                    await self.GetListCartItems();
                    await self.GetListProducts();
                    if (self.productIDSelected) {
                        await self.GetProductSetting();
                    }
                },
                AddCart: async function (productID) {
                    var self = this;
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Cart/AddToCart",
                        data: JSON.stringify({
                            productID: productID,
                            amount: 1,
                            size: ""
                        }),
                        success: function (res) {
                            if (res.status == 1) {
                                self.GetModels();
                                ShowAlert(res.message, "success");
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (status, xhr, error) {
                            if (status.status == 401) {
                                window.location.href = window.location.origin + "/access/login";
                            }
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },
                GetProductSetting: async function () {
                    var self = this;
                    self.listPartProduct = [];
                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Design/GetProductSetting",
                        data: JSON.stringify({
                            ID: self.productIDSelected
                        }),
                        success: function (res) {
                            if (res.status == 1) {
                                self.listPartProduct = res.data;
                                appFeatures.listPartProduct = res.data;
                                console.log(self.listPartProduct)

                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            ShowAlert(status.status, "danger");
                        }
                    });
                },


            },
            mounted() {
                this.init();
            },
        });

        var appDesign = new Vue({
            el: "#appDesign",
            data: {
                modelViewer: {},
                model: {},
                scene: {},
                listMaterials: [],
                materialSelectedName: "",
                isNotHidePositionOther: false,
                listPartProduct: [],
                modelSize: new THREE.Vector3(0, 0, 0),

                partProductSelected: {},

                dataChangeColor: {
                    imageTexture: "/images/none.svg",
                    color: '#FFFFFF',
                    isFisrtChangeColor: true,
                    scaleTexture: 1,
                    querySearch: '',

                    listImages: [],
                    loadingImage: true,
                },
                dataChangeMaterial: {
                    listMaterials: [],
                    loadingMaterial: true,
                    matSelected: ''
                },
                dataChangeDecal: {
                    dataSave: [],
                    rotation: 0,
                    sizePercent: 1,
                    sizePercentMin: 0.001,
                    sizePercentMax: 10,
                    sizePercentStep: 0.001,
                    imageSelect: '/images/none.svg',
                    image: '/images/none.svg',
                    querySearch: '',

                    listImages: [],
                    loadingImage: true,

                    textDecal: '',
                    textFontSize: 40,
                    textColor: '#87abdf',
                    listTextDecals: [],

                    isActive: false,
                    decals: [],

                    decalMaterial: '',
                    mesh: '',
                    raycaster: '',
                    line: '',
                    intersects: [],
                    mouse: new THREE.Vector2(),
                    position: new THREE.Vector3(),
                    orientation: new THREE.Euler(),
                    size: new THREE.Vector3(1, 1, 1),
                    mouseHelper: '',
                    intersection: {
                        intersects: false,
                        point: new THREE.Vector3(),
                        normal: new THREE.Vector3()
                    },


                }

            },
            methods: {
                init: async function () {
                    var self = this;

                    document.getElementById("model-main").addEventListener('load', async (e) => {
                        self.modelViewer = e.target;
                        self.model = e.target.model;
                        self.scene = e.target[Object.getOwnPropertySymbols(e.target).find(e => e.description === 'scene')];
                        console.log(self.scene);
                        self.listMaterials = e.target.model.materials;
                        self.listPartProduct = appSelectModel.listPartProduct; //list part name product
                        self.materialSelectedName = self.listPartProduct[0].nameDefault;
                        self.partProductSelected = self.listPartProduct[0];
                        self.dataChangeColor.color = self.listPartProduct[0].designInfo ? self.listPartProduct[0].designInfo.color : '#ffffff';
                        self.dataChangeColor.scaleTexture = self.listPartProduct[0].designInfo ? self.listPartProduct[0].designInfo.textureScale : 1;

                        self.getListMaterialOfPartProductSelected();
                        await self.GetDecals();

                    });

                    var srcModel = '@Html.Raw(ViewBag.src)';
                    if (srcModel) {
                        //lấy thông tin chiều cao, rộng, sâu của model
                        new GLTFLoader().load(srcModel, (gltf) => {
                            //Lấy thông tin kích thước của model
                            const boundingBox = new THREE.Box3().setFromObject(gltf.scene);
                            const size = new THREE.Vector3();
                            boundingBox.getSize(size);
                            self.modelSize = size;
                            //set kích thước min max của ảnh decal (m)
                            //*100 chuyển thành cm
                            self.dataChangeDecal.sizePercentMax = (size.y / 2 * 100).toFixed(3);
                            self.dataChangeDecal.sizePercentMin = (size.y).toFixed(3);
                            self.dataChangeDecal.sizePercentStep = (size.y).toFixed(3);
                            self.dataChangeDecal.sizePercent = (size.y / 5 * 100).toFixed(3);

                            console.log(self.modelSize);
                        });
                    }



                    await this.SearchImageChangeColor();
                    await this.SearchImageChangeDecal();

                    this.$forceUpdate();
                },
                TextureDefault: function () {
                    var self = this;
                    //gọi app select lấy meterial đang select để thay đổi màu
                    for (var m of self.GetMaterialsSelected()) {
                        // var proP = self.listPartProduct.find(e => e.nameDefault == m.name);
                        // var obj = Object.getOwnPropertySymbols(m.pbrMetallicRoughness.metallicRoughnessTexture);
                        // var mat = m.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e2 => e2.description === 'materials')];
                        // mat.forEach(a => {
                        //     //map là màu sắc cơ bản của vật liệu mà không có thông tin về ánh sáng hoặc bóng
                        //     a.color.r = 1;
                        //     a.color.g = 1;
                        //     a.color.b = 1;
                        //     a.map = null;
                        //     a.normalMap = null;

                        //     //Specifies that the material needs to be recompiled.
                        //     a.needsUpdate = true;
                        // });

                        //change kết cấu
                        m.normalTexture.setTexture(null);
                        //change màu kết cấu
                        m.pbrMetallicRoughness['baseColorTexture'].setTexture(null);
                        m.pbrMetallicRoughness.setBaseColorFactor(self.dataChangeColor.color);
                    }
                },
                Select: async function () {
                    var self = this;

                    self.partProductSelected = self.listPartProduct.find(e => e.nameDefault == self.materialSelectedName);
                    await self.getListMaterialOfPartProductSelected();


                    if (!self.materialSelectedName || self.isNotHidePositionOther) {
                        //set tất cả material của model về màu chưa opacity
                        for (var m of self.listMaterials) {
                            m.setAlphaMode("OPAQUE");
                            m.pbrMetallicRoughness.setBaseColorFactor([m.pbrMetallicRoughness.baseColorFactor[0], m.pbrMetallicRoughness.baseColorFactor[1], m.pbrMetallicRoughness.baseColorFactor[2], 1]);
                        }
                        return;
                    }

                    for (var m of self.listMaterials) {
                        if (m.name != self.materialSelectedName) {
                            m.setAlphaMode("BLEND");
                            m.pbrMetallicRoughness.setBaseColorFactor([m.pbrMetallicRoughness.baseColorFactor[0], m.pbrMetallicRoughness.baseColorFactor[1], m.pbrMetallicRoughness.baseColorFactor[2], 0.15]);
                        }
                        else {
                            m.setAlphaMode("OPAQUE");
                            m.pbrMetallicRoughness.setBaseColorFactor([m.pbrMetallicRoughness.baseColorFactor[0], m.pbrMetallicRoughness.baseColorFactor[1], m.pbrMetallicRoughness.baseColorFactor[2], 1]);
                        }
                    }
                },
                GetMaterialsSelected: function () {
                    var self = this;
                    if (self.materialSelectedName) {
                        return self.listMaterials.filter(e => e.name == self.materialSelectedName);
                    }
                    else {
                        return self.listMaterials;
                    }
                },
                SearchImageChangeColor: async function () {
                    var self = this;
                    self.dataChangeColor.loadingImage = true;
                    var images = await SearchImages(self.dataChangeColor.querySearch, 28, 1);
                    if (images.length > 0) {
                        self.dataChangeColor.listImages = images.map(e => `https://images.unsplash.com/${e.url.trim()}?auto=format&fit=crop&w=500&h=500`);
                    }
                    self.dataChangeColor.loadingImage = false;
                },
                ChangeColor: function () {
                    var self = this;


                    //gọi app select lấy meterial đang select để thay đổi màu
                    for (var m of self.GetMaterialsSelected()) {
                        if (self.dataChangeColor.isFisrtChangeColor || !self.partProductSelected.designInfo || !self.partProductSelected.designInfo.imageTexture) {
                            var obj = Object.getOwnPropertySymbols(m.pbrMetallicRoughness.metallicRoughnessTexture);
                            var mat = m.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e2 => e2.description === 'materials')];
                            mat.forEach(a => {
                                //map là màu sắc cơ bản của vật liệu mà không có thông tin về ánh sáng hoặc bóng
                                a.color.r = 1;
                                a.color.g = 1;
                                a.color.b = 1;
                                // a.map = null;
                                //Specifies that the material needs to be recompiled.
                                a.needsUpdate = true;
                            });
                        }

                        m.pbrMetallicRoughness.setBaseColorFactor(self.dataChangeColor.color);
                    }
                    self.dataChangeColor.isFisrtChangeColor = false;

                },
                ChangeTexture: async function (url) {
                    var self = this;

                    var partP = self.listPartProduct.find(m => m.nameDefault == self.GetMaterialsSelected()[0].name);
                    if (self.dataChangeMaterial.matSelected && partP.materials && partP.materials.length > 0) {
                        console.log(partP);
                        var matP = partP.materials.find(d => d.materialID == self.dataChangeMaterial.matSelected);
                        if (matP && matP.isDecal == false) {
                            ShowAlert(`Chất liệu ${matP.name} của bộ phận ${partP.nameCustom} không hỗ trợ họa tiết!`, 'warning');
                            return;
                        }
                    }



                    self.dataChangeColor.imageTexture = url;
                    const texture = await self.modelViewer.createTexture(url);
                    for (var m of self.GetMaterialsSelected()) {
                        if (self.dataChangeColor.isFisrtChangeColor) {
                            var obj = Object.getOwnPropertySymbols(m.pbrMetallicRoughness.metallicRoughnessTexture);
                            var mat = m.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e2 => e2.description === 'materials')];
                            mat.forEach(a => {
                                //map là màu sắc cơ bản của vật liệu mà không có thông tin về ánh sáng hoặc bóng
                                // a.color.r = 1;
                                // a.color.g = 1;
                                // a.color.b = 1;
                                a.map = null;
                                //Specifies that the material needs to be recompiled.
                                a.needsUpdate = true;
                            });
                        }


                        //change kết cấu
                        m.normalTexture.setTexture(texture);
                        //change màu kết cấu
                        m.pbrMetallicRoughness['baseColorTexture'].setTexture(texture);

                        m.pbrMetallicRoughness['baseColorTexture'].texture.sampler.setScale({ u: this.dataChangeColor.scaleTexture, v: this.dataChangeColor.scaleTexture });

                        //set chế độ scale texture là ClampToEdge (0-1) //repeat = 10497
                        m.pbrMetallicRoughness['baseColorTexture'].texture.sampler.setWrapS(33071);
                        m.pbrMetallicRoughness['baseColorTexture'].texture.sampler.setWrapT(33071);



                    }
                    for (var m of self.GetMaterialsSelected()) {
                        console.log(m)
                        if (m.nameMatSave) {
                            var matbyid = self.dataChangeMaterial.listMaterials.find(e => e.name == m.nameMatSave);
                            self.changeMaterial(null);
                            self.changeMaterial(matbyid);
                            m.needsUpdate = true;
                        }

                    }

                    self.dataChangeColor.isFisrtChangeColor = false;
                    self.$forceUpdate();
                },
                GetUrlFileUploadChangeColor: async function (e) {
                    var self = this;
                    let file = e.target.files[0];
                    //check file ảnh tải lên
                    if (file && file['type'].split('/')[0] === 'image') {
                        let url = URL.createObjectURL(file);
                        await self.ChangeTexture(url);
                    }
                },
                ChangeScaleTexture: function () {
                    var self = this
                    var scale = { u: this.dataChangeColor.scaleTexture, v: this.dataChangeColor.scaleTexture };
                    for (var m of self.GetMaterialsSelected()) {
                        m.pbrMetallicRoughness['baseColorTexture'].texture.sampler.setScale(scale);
                    }
                    this.$forceUpdate();
                },
                getListMaterialOfPartProductSelected: async function () {
                    var self = this;
                    var productSettingID = 0;
                    if (self.materialSelectedName) {
                        productSettingID = self.listPartProduct.find(e => e.nameDefault == self.materialSelectedName).productSettingID;
                    }

                    self.dataChangeMaterial.loadingMaterial = true;
                    self.dataChangeMaterial.listMaterials = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Design/GetMaterials",
                        data: JSON.stringify({
                            ID: productSettingID
                        }),
                        success: function (res) {
                            self.dataChangeMaterial.loadingMaterial = false;
                            if (res.status == 1) {
                                self.dataChangeMaterial.listMaterials = res.data;
                                //change id mat selected
                                if (self.partProductSelected.designInfo) {
                                    var x = self.dataChangeMaterial.listMaterials.find(e => e.name == self.partProductSelected.designInfo.nameMaterial);
                                    if (x) {
                                        self.dataChangeMaterial.matSelected = x.materialID;
                                    }
                                    else {
                                        self.dataChangeMaterial.matSelected = "";
                                    }
                                }
                                else {
                                    self.dataChangeMaterial.matSelected = "";
                                }
                                console.log(res.data)
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (xhr, status, error) {
                            self.dataChangeMaterial.loadingMaterial = false;
                        }
                    });

                },
                changeMaterial: function (material) {
                    var self = this;
                    console.log(material)
                    if (material) {
                        if (material.isDecal == false) {
                            //xóa tất cả decal
                            self.DeleteAllDecal();

                            for (var m of self.GetMaterialsSelected()) {
                                var obj = Object.getOwnPropertySymbols(m.pbrMetallicRoughness.metallicRoughnessTexture);
                                var mat = m.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e2 => e2.description === 'materials')];
                                mat.forEach(a => {
                                    //map là màu sắc cơ bản của vật liệu mà không có thông tin về ánh sáng hoặc bóng
                                    a.map = null;
                                    //Specifies that the material needs to be recompiled.
                                    a.needsUpdate = true;
                                });
                            }

                            ShowAlert('Chất liệu này không hỗ trợ in hoạ tiết và hình dán!', 'info');
                        }
                        //đại diện cho màu sắc cơ bản của vật liệu mà không có thông tin về ánh sáng hoặc bóng.
                        // var map = new THREE.TextureLoader().load(material.map);
                        //mô phỏng cách ánh sáng tương tác với môi trường xung quanh
                        var aoMap = new THREE.TextureLoader().load(material.aoMap);
                        //sử dụng để tạo ra chi tiết đồ họa
                        var normalMap = new THREE.TextureLoader().load(material.normalMap);
                        // xác định độ nhám
                        var roughnessMap = new THREE.TextureLoader().load(material.roughnessMap);
                        // xác định vị trí của các vùng kim loại trong vật liệu
                        var metalnessMap = new THREE.TextureLoader().load(material.metalnessMap);
                        //thông tin về chiều cao của bề mặt vật liệu
                        // var displacementMap = new THREE.TextureLoader().load(material.displacementMap);
                        for (var elm of self.GetMaterialsSelected()) {
                            var obj = Object.getOwnPropertySymbols(elm.pbrMetallicRoughness.metallicRoughnessTexture);
                            var mat = elm.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e => e.description === 'materials')];
                            mat.forEach(a => {
                                // a.map = map;
                                a.aoMap = aoMap;
                                a.normalMap = normalMap;
                                a.roughnessMap = roughnessMap;
                                a.metalnessMap = metalnessMap;
                                a.needsUpdate = true;
                            });

                            //name để save
                            elm.nameMatSave = material.name;
                        }
                    }
                    else {

                        for (var elm of self.GetMaterialsSelected()) {
                            var defaultMatE = appSelectModel.defaultMat.find(e => e.name == elm.name);
                            var obj = Object.getOwnPropertySymbols(elm.pbrMetallicRoughness.metallicRoughnessTexture);
                            var mat = elm.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e => e.description === 'materials')];
                            mat.forEach(a => {
                                // a.map = defaultMatE.defaultObjMat.map;
                                a.aoMap = defaultMatE.defaultObjMat.aoMap;
                                a.normalMap = defaultMatE.defaultObjMat.normalMap;
                                a.roughnessMap = defaultMatE.defaultObjMat.roughnessMap;
                                a.metalnessMap = defaultMatE.defaultObjMat.metalnessMap;

                                // a.map = map;
                                // a.aoMap = self.partProductSelected.aoMap ? new THREE.TextureLoader().load(window.location.origin + self.partProductSelected.aoMap) : a.aoMap;
                                // a.normalMap = self.partProductSelected.normalMap ? new THREE.TextureLoader().load(window.location.origin + self.partProductSelected.normalMap) : a.normalMap;
                                // a.roughnessMap = self.partProductSelected.roughnessMap ? new THREE.TextureLoader().load(window.location.origin + self.partProductSelected.roughnessMap) : a.roughnessMap;
                                // a.metalnessMap = self.partProductSelected.metalnessMap ? new THREE.TextureLoader().load(window.location.origin + self.partProductSelected.metalnessMap) : a.metalnessMap;
                                a.needsUpdate = true;
                            });
                        }
                        //name để save
                        elm.nameMatSave = self.partProductSelected.nameMaterialDefault;
                    }

                },
                SearchImageChangeDecal: async function () {
                    var self = this;
                    self.dataChangeDecal.loadingImage = true;
                    var images = await SearchImages(self.dataChangeDecal.querySearch, 28, 1);
                    if (images.length > 0) {
                        self.dataChangeDecal.listImages = images.map(e => `https://images.unsplash.com/${e.url.trim()}?auto=format&fit=crop&w=500&h=500`);
                    }
                    self.dataChangeDecal.loadingImage = false;
                },
                GetUrlFileUploadChangeDecal: async function (e) {
                    var self = this;
                    let file = e.target.files[0];
                    //check file ảnh tải lên
                    if (file && file['type'].split('/')[0] === 'image') {
                        let url = URL.createObjectURL(file);
                        self.ChangeImageDecal(url);
                    }
                },
                GenerateImageTextDecal: function () {
                    var self = this;
                    const canvas = document.getElementById('myCanvas');
                    canvas.width = 200;
                    canvas.height = 200;

                    const ctx = canvas.getContext("2d");

                    // Draw the background
                    ctx.rect(0, 0, 200, 200);
                    ctx.fillStyle = "transparent";
                    ctx.fill();

                    // Draw the text
                    ctx.font = `${self.dataChangeDecal.textFontSize}px Helvetica`;
                    ctx.fillStyle = self.dataChangeDecal.textColor;  // Set text color, e.g., black
                    ctx.textAlign = "center";
                    ctx.textBaseline = "middle";

                    ctx.fillText(self.dataChangeDecal.textDecal, canvas.width / 2, canvas.height / 2);
                    canvas.toBlob(function (blob) {
                        const blobUrl = URL.createObjectURL(blob);
                        self.dataChangeDecal.listTextDecals.push(blobUrl);
                    }, 'image/png');
                },
                ChangeImageDecal: function (url) {
                    var self = this;
                    self.dataChangeDecal.imageSelect = url;
                    rotateImage(url, self.dataChangeDecal.rotation, function (img) {
                        self.dataChangeDecal.image = img;
                        //decal dán
                        const textureLoader = new THREE.TextureLoader();
                        const decalDiffuse = textureLoader.load(self.dataChangeDecal.image);
                        decalDiffuse.colorSpace = THREE.SRGBColorSpace;
                        const decalNormal = textureLoader.load(self.dataChangeDecal.image);

                        self.dataChangeDecal.decalMaterial = new THREE.MeshStandardMaterial({
                            // specular: 0x444444,
                            map: decalDiffuse,
                            normalMap: decalNormal,
                            normalScale: new THREE.Vector2(1, 1),
                            // shininess: 30,
                            transparent: true,
                            depthTest: true,
                            depthWrite: false,
                            polygonOffset: true,
                            polygonOffsetFactor: - 4,
                            wireframe: false,
                            side: THREE.FrontSide
                        });
                        self.$forceUpdate();
                    });

                },
                StartDecal: function () {
                    var self = this;
                    if (!self.model) {
                        ShowAlert('Vui lòng chọn mô hình khi bắt đầu dán.', 'warning');
                        return;
                    }
                    if (!self.dataChangeDecal.image || self.dataChangeDecal.image == '/images/none.svg') {
                        ShowAlert('Vui lòng chọn ảnh trước khi bắt đầu dán.', 'warning');
                        return;
                    }

                    //decal dán
                    const textureLoader = new THREE.TextureLoader();
                    const decalDiffuse = textureLoader.load(self.dataChangeDecal.image);
                    decalDiffuse.colorSpace = THREE.SRGBColorSpace;
                    const decalNormal = textureLoader.load(self.dataChangeDecal.image);

                    self.dataChangeDecal.decalMaterial = new THREE.MeshStandardMaterial({
                        // specular: 0x444444,
                        map: decalDiffuse,
                        normalMap: decalNormal,
                        normalScale: new THREE.Vector2(1, 1),
                        // shininess: 30,
                        transparent: true,
                        depthTest: true,
                        depthWrite: false,
                        polygonOffset: true,
                        polygonOffsetFactor: - 4,
                        wireframe: false,
                        side: THREE.FrontSide, //chỉ in ngoài
                    });
                    //khởi tạo tia
                    self.dataChangeDecal.raycaster = new THREE.Raycaster();
                    const geometry = new THREE.BufferGeometry();
                    geometry.setFromPoints([new THREE.Vector3(), new THREE.Vector3()]);

                    self.dataChangeDecal.line = new THREE.Line(geometry, new THREE.LineBasicMaterial());
                    self.dataChangeDecal.mouse = new THREE.Vector2();
                    self.dataChangeDecal.position = new THREE.Vector3();
                    self.dataChangeDecal.orientation = new THREE.Euler();

                    self.dataChangeDecal.mouseHelper = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 10), new THREE.MeshNormalMaterial());
                    self.dataChangeDecal.mouseHelper.visible = false;
                    self.scene.add(self.dataChangeDecal.mouseHelper);

                    self.dataChangeDecal.intersection = {
                        intersects: false,
                        point: new THREE.Vector3(),
                        normal: new THREE.Vector3()
                    };

                    self.dataChangeDecal.intersects = [];

                    self.modelViewer.addEventListener('click', self.shoot);


                    self.dataChangeDecal.isActive = true;

                },
                checkIntersection: function (x, y) {
                    var self = this;

                    if (!self.dataChangeDecal.mesh) return;

                    self.dataChangeDecal.mouse.x = (x / window.innerWidth) * 2 - 1;
                    self.dataChangeDecal.mouse.y = - (y / window.innerHeight) * 2 + 1;

                    self.dataChangeDecal.raycaster.setFromCamera(self.dataChangeDecal.mouse, self.scene.camera);
                    self.dataChangeDecal.raycaster.intersectObject(self.dataChangeDecal.mesh, false, self.dataChangeDecal.intersects);

                    if (self.dataChangeDecal.intersects.length > 0) {

                        const p = self.dataChangeDecal.intersects[0].point;
                        self.dataChangeDecal.mouseHelper.position.copy(p);
                        self.dataChangeDecal.intersection.point.copy(p);

                        const n = self.dataChangeDecal.intersects[0].face.normal.clone();
                        n.transformDirection(self.dataChangeDecal.mesh.matrixWorld);
                        n.multiplyScalar(10);
                        n.add(self.dataChangeDecal.intersects[0].point);

                        self.dataChangeDecal.intersection.normal.copy(self.dataChangeDecal.intersects[0].face.normal);
                        self.dataChangeDecal.mouseHelper.lookAt(n);

                        const positions = self.dataChangeDecal.line.geometry.attributes.position;
                        positions.setXYZ(0, p.x, p.y, p.z);
                        positions.setXYZ(1, n.x, n.y, n.z);
                        positions.needsUpdate = true;

                        self.dataChangeDecal.intersection.intersects = true;

                        self.dataChangeDecal.intersects.length = 0;

                    } else {

                        self.dataChangeDecal.intersection.intersects = false;

                    }

                },
                shoot: function (event) {
                    var self = this;

                    var matSelected = self.modelViewer.materialFromPoint(event.clientX, event.clientY);

                    //check bộ phận này chất liệu có thể in decal được hay không
                    if (matSelected && matSelected.name == self.GetMaterialsSelected()[0].name) {
                        var partP = self.listPartProduct.find(m => m.nameDefault == matSelected.name);
                        if (partP && partP.materials.length > 0 && partP.materials[0]) {
                            var matP = partP.materials.find(d => d.materialID == self.dataChangeMaterial.matSelected);
                            if (matP && matP.isDecal == false) {
                                ShowAlert(`Chất liệu ${matP.name} của bộ phận ${partP.nameCustom} không thể dán hình`, 'warning');
                                return;
                            }
                        }

                    }
                    else {
                        return;
                    }

                    self.scene.traverse(function (object) {

                        if (object.isMesh && object.material && object.material.name.toLowerCase() == matSelected.name.toLowerCase()) {
                            self.dataChangeDecal.mesh = object;
                        }

                    });

                    self.checkIntersection(event.clientX, event.clientY);

                    if (!self.dataChangeDecal.intersection.intersects) return;

                    self.dataChangeDecal.position.copy(self.dataChangeDecal.intersection.point);
                    self.dataChangeDecal.orientation.copy(self.dataChangeDecal.mouseHelper.rotation);

                    console.log(self.dataChangeDecal.position);
                    console.log(self.dataChangeDecal.orientation);

                    // self.dataChangeDecal.orientation.z = 10 * 2 * Math.PI;

                    // console.log(self.dataChangeDecal.orientation)

                    // chia 100 từ cm chuyển thành mét

                    self.dataChangeDecal.size.set(self.dataChangeDecal.sizePercent / 100, self.dataChangeDecal.sizePercent / 100, self.dataChangeDecal.sizePercent / 100);

                    const m = new THREE.Mesh(new DecalGeometry(self.dataChangeDecal.mesh, self.dataChangeDecal.position, self.dataChangeDecal.orientation, self.dataChangeDecal.size), self.dataChangeDecal.decalMaterial.clone());
                    m.renderOrder = self.dataChangeDecal.decals.length; // give decals a fixed render order

                    console.log(self.dataChangeDecal.size);
                    self.dataChangeDecal.decals.push(m);
                    self.scene.add(m);

                    //rerender
                    self.scene.queueRender();

                    self.dataChangeDecal.dataSave.push({
                        meshUuid: matSelected.name,
                        image: self.dataChangeDecal.image,
                        size: self.dataChangeDecal.sizePercent / 100,
                        positionX: self.dataChangeDecal.position.x,
                        positionY: self.dataChangeDecal.position.y,
                        positionZ: self.dataChangeDecal.position.x,
                        orientationX: self.dataChangeDecal.orientation.x,
                        orientationY: self.dataChangeDecal.orientation.y,
                        orientationZ: self.dataChangeDecal.orientation.z,
                        renderOrder: m.renderOrder
                    });
                    console.log(self.dataChangeDecal.dataSave);

                },
                StopDecal: function () {
                    var self = this;
                    this.modelViewer.removeEventListener('click', self.shoot);
                    this.dataChangeDecal.isActive = false;
                },
                DeleteDecalNewest: function () {
                    var self = this;
                    if (self.dataChangeDecal.decals.length > 0) {
                        var d = self.dataChangeDecal.decals.pop();
                        self.dataChangeDecal.dataSave.pop();
                        self.scene.remove(d);
                        d = null;
                        console.log(self.scene);

                        //rerender
                        self.scene.queueRender();
                    }
                    else {
                        ShowAlert('Chưa có hình dán nào trên mẫu.', 'warning');
                    }
                },
                DeleteAllDecal: function () {
                    var self = this;
                    self.dataChangeDecal.dataSave = [];
                    if (self.dataChangeDecal.decals.length > 0) {
                        self.dataChangeDecal.decals.forEach(e => {

                            self.scene.remove(e);
                            e = null;

                        })
                        //rerender
                        self.scene.queueRender();
                    }
                    else {
                        ShowAlert('Chưa có hình dán nào trên mẫu.', 'warning');
                    }
                },
                GetDecals: async function () {
                    var self = this;
                    self.dataChangeDecal.dataSave = [];
                    self.dataChangeDecal.decals = [];

                    $.ajax({
                        url: '/Design/GetDecals',
                        type: 'POST',
                        data: JSON.stringify({
                            ID: appSelectModel.productIDSelected
                        }),
                        contentType: "application/json; charset=utf-8",
                        success: function (res) {
                            if (res.status == 1) {
                                console.log(res.data);
                                for (var e of res.data) {
                                    //
                                    self.dataChangeDecal.dataSave.push({
                                        meshUuid: e.meshUuid,
                                        image: e.image,
                                        size: e.size,
                                        positionX: e.positionX,
                                        positionY: e.positionY,
                                        positionZ: e.positionZ,
                                        orientationX: e.orientationX,
                                        orientationY: e.orientationY,
                                        orientationZ: e.orientationZ,
                                        renderOrder: e.renderOrder
                                    });

                                    //decal dán
                                    var textureLoader = new THREE.TextureLoader();
                                    var decalDiffuse = textureLoader.load(e.image);
                                    decalDiffuse.colorSpace = THREE.SRGBColorSpace;
                                    var decalNormal = textureLoader.load(e.image);

                                    var decalMaterial = new THREE.MeshStandardMaterial({
                                        // specular: 0x444444,
                                        map: decalDiffuse,
                                        normalMap: decalNormal,
                                        normalScale: new THREE.Vector2(1, 1),
                                        // shininess: 30,
                                        transparent: true,
                                        depthTest: true,
                                        depthWrite: false,
                                        polygonOffset: true,
                                        polygonOffsetFactor: - 4,
                                        wireframe: false,
                                        side: THREE.FrontSide, //chỉ in ngoài
                                    });
                                    var mesh = null;
                                    self.scene.traverse(function (object) {

                                        if (object.isMesh && object.material && object.material.name.toLowerCase() == e.meshUuid.toLowerCase()) {
                                            mesh = object;
                                        }

                                    });
                                    if (!mesh) {
                                        continue;
                                    }
                                    console.log(mesh);

                                    var position = new THREE.Vector3(e.positionX, e.positionY, e.positionZ);
                                    var orientation = new THREE.Euler(e.orientationX, e.orientationY, e.orientationZ, 'XYZ');
                                    var size = new THREE.Vector3(e.size, e.size, e.size);

                                    const m = new THREE.Mesh(new DecalGeometry(mesh, position, orientation, size), decalMaterial);
                                    m.renderOrder = e.renderOrder; // give decals a fixed render order
                                    self.dataChangeDecal.decals.push(m);
                                    self.scene.add(m);




                                }
                                //rerender
                                self.scene.queueRender();

                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (error) {
                            ShowAlert(error, "danger");
                        }
                    });
                },
            },
            mounted() {
                this.init();
            },
        });
        var appFeatures = new Vue({
            el: "#appFeatures",
            data: {
                productIDSelected: '@Html.Raw(ViewBag.id)', // id cartItem
                linkView: window.location.origin + '/design/viewdesign?id=' + '@Html.Raw(ViewBag.id)',
                listPartProduct: []
            },
            methods: {
                init: async function () {
                    var self = this;
                    if (self.productIDSelected) {
                        var qrcode = new QRCode(document.getElementById("qrcode"), {
                            text: self.linkView,
                            width: 256,
                            height: 256,
                            colorDark: "#000000",
                            colorLight: "#ffffff",
                            correctLevel: QRCode.CorrectLevel.H
                        });
                        console.log(qrcode);
                    }
                    this.$forceUpdate();
                },
                Save: async function () {
                    var self = this;
                    if (!appSelectModel.productIDSelected || !appSelectModel.listPartProduct) {
                        ShowAlert('Vui lòng chọn mẫu thiết kế.', 'danger');
                        return;
                    }
                    ShowLoader();

                    await self.DeleteDecal();
                    //add new decals
                    for (var dc of appDesign.dataChangeDecal.dataSave) {
                        await self.SaveDecal(dc.image, dc.meshUuid, dc.positionX, dc.positionY, dc.positionZ, dc.orientationX, dc.orientationY, dc.orientationZ, dc.renderOrder, dc.size);
                    }


                    var imageCartItem = await appDesign.modelViewer.toBlob({ idealAspect: false });

                    for (const productPart of appSelectModel.listPartProduct) {
                        var formData = new FormData();

                        var productPartOnModel = appDesign.listMaterials.find(e => e.name == productPart.nameDefault);

                        formData.append('cartItemID', appSelectModel.productIDSelected);
                        formData.append('productSettingID', productPart.productSettingID);
                        formData.append('designInfoID', productPart.designInfo ? productPart.designInfo.designInfoID : 0);
                        formData.append('designName', productPart.nameDefault);
                        formData.append('nameMaterial', productPartOnModel.nameMatSave ?? "");

                        //lấy thông tin map
                        var obj = Object.getOwnPropertySymbols(productPartOnModel.pbrMetallicRoughness.metallicRoughnessTexture);
                        var materials = productPartOnModel.pbrMetallicRoughness.metallicRoughnessTexture[obj.find(e => e.description === 'materials')];

                        var aoMap = "";
                        var normalMap = "";
                        var roughnessMap = "";
                        var metalnessMap = "";
                        //type Set
                        materials.forEach(a => {
                            // a.map = map;
                            aoMap = a.aoMap ? self.getImageByMap(a.aoMap.image) : null;
                            normalMap = a.normalMap ? self.getImageByMap(a.normalMap.image) : null;
                            roughnessMap = a.roughnessMap ? self.getImageByMap(a.roughnessMap.image) : null;
                            metalnessMap = a.metalnessMap ? self.getImageByMap(a.metalnessMap.image) : null;
                        });
                        if (aoMap) {
                            formData.append('aoMap', aoMap, 'aoMap.png');
                        }
                        else {
                            formData.append('aoMap', aoMap);
                        }
                        if (normalMap) {
                            formData.append('normalMap', normalMap, 'normalMap.png');
                        }
                        else {
                            formData.append('normalMap', normalMap);
                        }
                        if (roughnessMap) {
                            formData.append('roughnessMap', roughnessMap, 'roughnessMap.png');
                        }
                        else {
                            formData.append('roughnessMap', roughnessMap);

                        }
                        if (metalnessMap) {
                            formData.append('metalnessMap', metalnessMap, 'metalnessMap.png');
                        }
                        else {
                            formData.append('metalnessMap', metalnessMap);
                        }

                        //lấy thông tin texture color
                        var colorM = new THREE.Color(productPartOnModel.pbrMetallicRoughness.baseColorFactor[0], productPartOnModel.pbrMetallicRoughness.baseColorFactor[1], productPartOnModel.pbrMetallicRoughness.baseColorFactor[2]).getHexString();
                        formData.append('color', "#" + colorM);

                        if (productPartOnModel.pbrMetallicRoughness.baseColorTexture.texture && isURL(productPartOnModel.pbrMetallicRoughness.baseColorTexture.texture.source.uri)) {
                            var blobImageTexture = await imageURLToBlob(productPartOnModel.pbrMetallicRoughness.baseColorTexture.texture.source.uri);
                            formData.append('imageTexture', blobImageTexture, 'imageTexture.png');
                            formData.append('textureScale', productPartOnModel.pbrMetallicRoughness.baseColorTexture.texture.sampler.scale.v);

                        } else {
                            formData.append('imageTexture', null);
                            formData.append('textureScale', 1);
                        }


                        formData.append('imageCartItem', imageCartItem, 'imageCartItem.png');


                        $.ajax({
                            url: '/design/SaveDesign',
                            type: 'POST',
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (res) {
                                if (res.status == 1) {
                                    productPart.designInfo = res.data;
                                    ShowAlert(res.message, 'success');
                                    document.querySelector('#product-cart-selected a img').src = URL.createObjectURL(imageCartItem);
                                    HideLoader();
                                }
                                else {
                                    ShowAlert(res.message, 'danger');
                                    HideLoader();

                                }
                            },
                            error: function (error) {
                                ShowAlert(error, "danger");
                                HideLoader();

                            }
                        });
                    }



                },
                SaveDecal: async function (image, meshUuid, positionX, positionY, positionZ, orientationX, orientationY, orientationZ, renderOrder, size) {
                    // self.dataChangeDecal.dataSave;
                    var self = this;
                    var blobImage = await imageURLToBlob(image);


                    var formData = new FormData();
                    formData.append('cartItemID', appSelectModel.productIDSelected);
                    formData.append('meshUuid', meshUuid);
                    formData.append('positionX', positionX);
                    formData.append('positionY', positionY);
                    formData.append('positionZ', positionZ);
                    formData.append('orientationX', orientationX);
                    formData.append('orientationY', orientationY);
                    formData.append('orientationZ', orientationZ);

                    formData.append('renderOrder', renderOrder);
                    formData.append('size', size);

                    if (blobImage) {
                        formData.append('image', blobImage, 'image.png');
                    }
                    else {
                        formData.append('image', blobImage);
                    }

                    $.ajax({
                        url: '/Design/SaveDecal',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (res) {
                            if (res.status == 1) {
                                console.log(res.message);
                            }
                        },
                        error: function (error) {
                            ShowAlert(error.responseJSON.mesage, "danger");
                        }
                    });
                },
                DeleteDecal: async function () {
                    $.ajax({
                        url: '/Design/DeleteAllDecal',
                        type: 'POST',
                        data: JSON.stringify({
                            ID: appSelectModel.productIDSelected
                        }),
                        contentType: "application/json; charset=utf-8",
                        success: function (res) {
                            if (res.status == 1) {
                                console.log(res.message);

                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (error) {
                            ShowAlert(error, "danger");
                        }
                    });
                },
                exportGLB: async function () {
                    if (appSelectModel.productIDSelected) {
                        const modelViewer = document.getElementById("model-main");
                        const glTF = await modelViewer.exportScene();
                        const file = new File([glTF], "export.glb");
                        const link = document.createElement("a");
                        link.download = file.name;
                        link.href = URL.createObjectURL(file);
                        link.click();
                    }
                    else {
                        ShowAlert('Vui lòng chọn mẫu thiết kế.', 'warning');
                    }
                },
                captureModel: async function () {
                    if (appSelectModel.productIDSelected) {
                        const modelViewer = document.getElementById("model-main");
                        const url = modelViewer.toDataURL();
                        const a = document.createElement("a");
                        a.href = url;
                        a.download = "capture.png";
                        a.click();
                        URL.revokeObjectURL(url);
                    }
                    else {
                        ShowAlert('Vui lòng chọn mẫu thiết kế.', 'warning');
                    }
                },

                getImageByMap: function (image) {
                    if (!image) {
                        return null;
                    }
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.width = image.width;
                    canvas.height = image.height;
                    context.drawImage(image, 0, 0);

                    var dataURL = canvas.toDataURL('image/png');

                    // Convert base64 to binary
                    var byteString = atob(dataURL.split(',')[1]);
                    var mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
                    var ab = new ArrayBuffer(byteString.length);
                    var ia = new Uint8Array(ab);
                    for (var i = 0; i < byteString.length; i++) {
                        ia[i] = byteString.charCodeAt(i);
                    }
                    return new Blob([ab], { type: mimeString });
                },


            },
            mounted() {
                this.init();
            },
        });



    </script>



</body>

</html>