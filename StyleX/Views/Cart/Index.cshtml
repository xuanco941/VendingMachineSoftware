@{
    Layout = "_Layout";
}

<section class="ftco-section ftco-cart bg-light" id="appCart">
    <div class="container-x mt-4">
        <span class="px-3 text-success">*Bạn sẽ nhận được lượt 10 lượt quay thưởng khi đơn hàng được giao đến bạn thành công.</span>
        <div class="row">
            <div class="col-12 ftco-animate">
                <div class="cart-list" style="overflow-x: auto; max-height: 800px; overflow-y: auto">
                    <table class="table table-bordered" style="vertical-align: middle;">
                        <thead class="thead-primary">
                            <tr class="text-center">
                                <th>Chọn</th>
                                <th>Hình ảnh</th>
                                <th>Sản phẩm</th>
                                <th>Số lượng</th>
                                <th>Size</th>
                                <th>Giá</th>
                                <th>Giảm giá</th>
                                <th>Thành tiền </th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-if="isLoad">
                                <td style="font-size: 40px; text-align:center;" colspan="8"><i class="fa-solid fa-spinner fa-spin-pulse"></i></td>
                            </tr>
                            <tr class="text-center" v-for="item in dataTable">
                                <td class="quantity m-0" style="width: 7%;">
                                    <input class="form-check-input mt-0 position-sticky" style="width: 30px; height: 30px;" type="checkbox" v-bind:id="'cart'+item.cartItemID" v-bind:value="item.cartItemID" v-model="cartSelected" v-on:change="ChangeItem()">
                                </td>

                                <td class="image-prod m-0" style="width: 18%">
                                    <div class="img" v-bind:style="{ 'background-image': 'url(' + item.posterUrl + ')' }"></div>
                                </td>

                                <td class="product-name" style="width: 18%">
                                    <h3>{{item.product.name}}</h3>
                                    <p>{{item.product.description}}</p>
                                </td>
                                <td class="quantity" style="width: 10%">
                                    <div class="input-group">
                                        <input type="number" name="quantity" class="quantity form-control input-number" min="1" v-model="item.amount" v-on:change="ChangeItem()">
                                    </div>
                                </td>
                                <td>
                                    <select class="form-select px-2 py-3" aria-label="Default select example" style="border: none; outline:none;" v-model="item.size" v-on:change="ChangeItem()">
                                        <option selected value="">Chọn size</option>
                                        <option v-bind:value="j.size" v-if="item.warehouses && item.warehouses[0]" v-for="j in item.warehouses">{{j.size}}</option>
                                    </select>
                                </td>
                                <td class="price">{{Number(item.product.price).toLocaleString("en-US")}}&#8363;</td>
                                <td class="sale">{{Number(item.product.sale).toLocaleString("en-US")}}%</td>

                                <td class="total">{{Number(item.product.price * item.amount - (item.product.price * item.amount * item.product.sale / 100)).toLocaleString("en-US")}}&#8363;</td>
                                <td>
                                    <a v-bind:href="'/design?id='+item.cartItemID" target="_blank" class="mx-2 my-2"><i style="font-size: 27px;" class="fa-solid fa-wand-magic-sparkles"></i></a>
                                    <a data-toggle="modal" data-target="#modalDelete" v-on:click="PopupDeleteProduct(item.cartItemID)" href="javascript:" class="mx-2 my-2"><i class="fa-solid fa-trash" style="color: #d71818; font-size: 27px;"></i></a>
                                </td>

                            </tr>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row justify-content-end align-items-stretch">
            <div class="col col-xl-7 col-lg-6 col-md-6 mt-5 cart-wrap ftco-animate h-100">
                <div class="cart-total mb-0 h-100">
                    <h3>Thông tin đặt hàng</h3>
                    <p class="d-flex align-items-center">
                        <span>Tên người nhận</span>
                        <input class="form-control form-control-sm" style="text-align: start;height:calc(1.5em + 0.5rem + 2px)!important;" v-model="dataAddOrder.name">
                    </p>
                    <p class="d-flex align-items-center">
                        <span>Địa chỉ</span>
                        <input class="form-control form-control-sm" style="text-align: start;height:calc(1.5em + 0.5rem + 2px)!important;" v-model="dataAddOrder.address">
                    </p>
                    <p class="d-flex align-items-center">
                        <span>Số điện thoại</span>
                        <input class="form-control form-control-sm" style="text-align: start;height:calc(1.5em + 0.5rem + 2px)!important;" v-model="dataAddOrder.phoneNumber">
                    </p>
                    <p class="d-flex align-items-center">
                        <span>Ghi chú</span>
                        <input class="form-control form-control-sm" style="text-align: start;height:calc(1.5em + 0.5rem + 2px)!important;" v-model="dataAddOrder.message">
                    </p>
                </div>

            </div>

            <div class="col col-xl-5 col-lg-6 col-md-6 mt-5 cart-wrap ftco-animate">
                <div class="cart-total h-100">
                    <h3>Thông tin thanh toán</h3>
                    <p class="d-flex">
                        <span>Tổng tiền</span>
                        <span>{{Number(dataThanhToan.tongTien).toLocaleString('en-US')}} &#8363;</span>
                    </p>
                    <p class="d-flex">
                        <span>Phí vận chuyển</span>
                        <span>@Html.Raw(Common.TransportFee.ToString("#,##0")) &#8363;</span>
                    </p>
                    <p class="d-flex" v-if="listPromotion && listPromotion[0]!=null">
                        <span>Phiếu giảm giá</span>
                        <span>
                            <select class="form-select px-2 py-2" v-model="promotionID" v-on:change="ChangeItem()">
                                <option selected value="0">Chọn phiếu giảm giá</option>
                                <option v-for="j in listPromotion" v-bind:value="j.promotionID">{{j.number}}% <span style="font-size:15px;" v-if="j.expiredAt">({{formatDateDisplay(j.expiredAt)}})</span></option>
                            </select>
                        </span>
                    </p>
                    <hr>
                    <p class="d-flex total-price">
                        <span>Thanh toán</span>
                        <span>{{Number(dataThanhToan.thanhToan).toLocaleString('en-US')}} &#8363;</span>
                    </p>
                </div>

            </div>

            <p class="text-center d-flex justify-content-center col col-xl-5 col-lg-6 col-md-6 mt-3">
                <a v-if="!dataAddOrder.isLoad" href="javascript:;" class="btn btn-primary py-3 px-4" style="font-size: 16px;" v-on:click="CreateOrder()">
                    TẠO ĐƠN HÀNG
                </a>
                <a v-if="dataAddOrder.isLoad" href="javascript:;" class="btn btn-primary py-3 px-4" style="font-size: 16px;" v-on:click="CreateOrder()">
                    Đang xử lý...
                </a>
            </p>
        </div>
    </div>


    <div class="modal fade" id="modalDelete" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 500px">
            <div class="modal-content" style="margin-bottom: 150px">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Xóa sản phẩm trong giỏ</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="overflow-x: auto; overflow-y: auto; max-height: 700px;">
                    <h3>Bạn có chắc chắn muốn bỏ sản phẩm này?</h3>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary px-3 py-0" style="color:white!important" data-dismiss="modal">Đóng</button>
                    <button v-if="isLoadDelete == false" type="button" class="btn btn-danger px-3 py-0" style="color:white!important" v-on:click="Delete()">Xác nhận</button>
                    <button v-if="isLoadDelete" type="button" class="btn btn-primary px-3 py-0" style="color:white!important">Đang xử lý...</button>
                </div>
            </div>
        </div>
    </div>

</section>

@section Scripts {
    <script>
        var appCart = new Vue({
            el: "#appCart",
            data: {
                dataTable: [],
                isLoad: true,
                cartSelected: [],
                cartItemIDDelete: 0,
                isLoadDelete: false,

                promotionID: 0,
                listPromotion: [],

                dataThanhToan: {
                    tongTien: 0,
                    thanhToan: 0
                },
                dataAddOrder: {
                    name: "",
                    address: "",
                    phoneNumber: "",
                    message: "",
                    isLoad: false

                }

            },
            methods: {
                init: async function () {

                    await this.GetAccountSession();
                    await this.GetPromotionAccount();
                    await this.GetCarts();

                    this.$forceUpdate();
                },
                GetCarts: async function () {
                    var self = this;
                    self.isLoad = true;
                    self.dataTable = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Cart/GetCarts",
                        data: JSON.stringify({
                        }),
                        success: function (res) {
                            self.isLoad = false;
                            if (res.status == 1) {
                                self.dataTable = res.data;
                                console.log(self.dataTable)
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (error) {
                            self.isLoad = false;
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },
                PopupDeleteProduct: async function (cartItemID) {
                    this.cartItemIDDelete = cartItemID;
                },
                Delete: async function () {
                    var self = this;

                    self.isLoadDelete = true;
                    $.ajax({
                        url: '/Cart/DeleteCartItem',
                        type: 'POST',
                        data: JSON.stringify({
                            ID: self.cartItemIDDelete,

                        }),
                        contentType: "application/json; charset=utf-8",
                        success: function (res) {
                            self.isLoadDelete = false;
                            if (res.status == 1) {
                                self.GetCarts();
                                ShowAlert(res.message, "success");
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                            $('#modalDelete').modal('hide');

                        },
                        error: function (error) {
                            self.isLoadDelete = false;
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },
                CreateOrder: async function () {
                    var self = this;
                    if (!self.dataTable || !self.cartSelected || self.cartSelected.length < 1) {
                        ShowAlert("Hãy chọn vật phẩm trong giỏ trước khi thanh toán.", "danger");
                        return;
                    }
                    if (!self.dataAddOrder.name) {
                        ShowAlert("Bạn chưa điền tên người nhận.", "danger");
                        return;
                    }
                    if (!self.dataAddOrder.address) {
                        ShowAlert("Bạn chưa điền địa chỉ người nhận.", "danger");
                        return;
                    }
                    if (!self.dataAddOrder.phoneNumber) {
                        ShowAlert("Bạn chưa điền số điện thoại người nhận.", "danger");
                        return;
                    }

                    var itemOrders = [];
                    var isErr1 = false;
                    var isErr2 = false;


                    self.cartSelected.forEach(e => {

                        var item = self.dataTable.find(p => p.cartItemID == e);
                        if (item.amount < 1) {
                            isErr1 = true;
                            return;
                        }
                        if (item.warehouses && item.warehouses[0]) {
                            console.log(item);
                            var warehouse = item.warehouses.find(e => e.size == item.size);
                            console.log(warehouse)
                            if (warehouse && warehouse != 'undefined') {
                                itemOrders.push({
                                    cartItemID: item.cartItemID,
                                    amount: item.amount,
                                    size: item.size,
                                    warehouseID: warehouse.warehouseID
                                })
                            }
                            else {
                                isErr2 = true;
                                ShowAlert("Bạn chưa chọn size cho sản phẩm.", "danger");
                                return;
                            }
                        }

                        else {
                            isErr2 = true
                            ShowAlert("Bạn chưa chọn size cho sản phẩm.", "danger");
                            return;
                        }

                    });

                    if (isErr1){
                        ShowAlert("Số lượng tối thiểu là từ 1 sản phẩm.", "danger");
                        return;

                    }
                    if (isErr2){
                        ShowAlert("Bạn chưa chọn size cho sản phẩm.", "danger");
                        return;
                    }

                    console.log(itemOrders);


                    self.dataAddOrder.isLoad = true;
                    $.ajax({
                        url: '/Order/CreateOrder',
                        type: 'POST',
                        data: JSON.stringify({
                            name: self.dataAddOrder.name,
                            address: self.dataAddOrder.address,
                            phoneNumber: self.dataAddOrder.phoneNumber,
                            message: self.dataAddOrder.message,
                            promotionID: self.promotionID,
                            itemOrders: itemOrders


                        }),
                        contentType: "application/json; charset=utf-8",
                        success: function (res) {
                            self.dataAddOrder.isLoad = false;
                            if (res.status == 1) {
                                self.GetCarts();
                                self.dataThanhToan.tongTien = 0;
                                self.dataThanhToan.thanhToan = 0;
                                self.promotionID = 0;
                                self.cartSelected = [];
                                self.GetPromotionAccount();

                                ShowAlert(res.message, "success");
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                            appCheckLogin.CheckLogin();

                        },
                        error: function (error) {
                            self.dataAddOrder.isLoad = false;
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });


                },
                ChangeItem: async function () {

                    var self = this;
                    console.log(self.dataTable)


                    var numberPromotion = 0;
                    self.dataThanhToan.tongTien = 0;
                    self.dataThanhToan.thanhToan = 0;

                    if (self.cartSelected && self.cartSelected.length > 0) {
                        if (self.promotionID) {
                            numberPromotion = self.listPromotion.find(e => e.promotionID == self.promotionID).number;
                        }
                        self.cartSelected.forEach(e => {
                            var p = self.dataTable.find(a => a.cartItemID == e);
                            var tien = p.product.price * p.amount - (p.product.price * p.amount * p.product.sale / 100);
                            self.dataThanhToan.tongTien = self.dataThanhToan.tongTien + tien;
                        });
                        self.dataThanhToan.thanhToan = self.dataThanhToan.tongTien - (self.dataThanhToan.tongTien * numberPromotion / 100) + @Html.Raw(Common.TransportFee);
                    }

                    console.log(self.cartSelected);


                },
                GetPromotionAccount: async function () {
                    var self = this;
                    self.listPromotion = [];

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Promotion/GetPromotionAccount",
                        data: JSON.stringify({
                        }),
                        success: function (res) {
                            if (res.status == 1) {
                                self.listPromotion = res.data;
                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (error) {
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },
                formatDateDisplay: function (inputDateString) {
                    if (!inputDateString) {
                        return "";
                    }

                    // Tạo một đối tượng Date từ chuỗi đầu vào
                    var inputDate = new Date(inputDateString);

                    // Lấy các thông tin thời gian từ đối tượng Date
                    var hours = inputDate.getHours().toString().padStart(2, '0');
                    var minutes = inputDate.getMinutes().toString().padStart(2, '0');
                    var seconds = inputDate.getSeconds().toString().padStart(2, '0');
                    var day = inputDate.getDate().toString().padStart(2, '0');
                    var month = (inputDate.getMonth() + 1).toString().padStart(2, '0'); //Tháng trong JavaScript bắt đầu từ 0, nên cần cộng thêm 1
                    var year = inputDate.getFullYear();


                    if (isNaN(day) || isNaN(month) || isNaN(year)) {
                        return '';
                    }


                    var formattedDate = `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
                    return formattedDate;
                },
                GetAccountSession: async function () {
                    var self = this;

                    $.ajax({
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        url: "/Account/GetAccountSession",
                        data: JSON.stringify({
                        }),
                        success: function (res) {
                            if (res.status == 1) {
                                self.dataAddOrder.name = res.data.fullName;
                                self.dataAddOrder.address = res.data.address;
                                self.dataAddOrder.phoneNumber = res.data.phoneNumber;

                            }
                            else {
                                ShowAlert(res.message, "danger");
                            }
                        },
                        error: function (error) {
                            ShowAlert(error.responseJSON.message, "danger");
                        }
                    });

                },








            },
            mounted() {
                this.init();
            },
        });

    </script>

}