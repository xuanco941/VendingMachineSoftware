<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Máy bán nước tự động</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet">

    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Libraries Stylesheet -->
    <link href="~/lib/lightbox/css/lightbox.min.css" rel="stylesheet">
    <link href="~/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">


    <!-- Customized Bootstrap Stylesheet -->
    <link href="~/css/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="~/css/style.css" rel="stylesheet">

    <style>

        body {
            font-size: 15px !important;
        }

            body::-webkit-scrollbar {
                width: 9px; /* Độ rộng thanh cuộn*/
                height: 8px;
            }

        ::-webkit-scrollbar {
            width: 5px; /* Độ rộng thanh cuộn*/
            height: 20px;
        }

        ::-webkit-scrollbar-track {
            background: var(--text-color-component); /* Màu nền của thanh cuộn */
        }

        ::-webkit-scrollbar-thumb {
            background: #453a5c; /* Màu của thanh cuộn */
        }

            ::-webkit-scrollbar-thumb:hover {
                background: #716191; /* Màu khi di chuột qua thanh cuộn */
            }
    </style>

</head>

<body>


    @RenderBody()


    <!-- Footer End -->
    <!-- Back to Top -->
    @*     <a href="#item0" class="btn btn-primary border-3 border-primary rounded-circle back-to-top" style="left: 30px !important; background-color: #ffe500; border-color: #ffe500 !important"><i class="fa fa-arrow-up"></i></a>
    *@
    <div id="modalLoading" style="display: none;width: 100vw; height: 100vh; position:fixed; opacity: 1; z-index: 99; background-color: #2a29451a; top: 0px; left:0px; justify-content:center; align-items: center">
        <i style="font-size: 110px; color: #81c408" class="fas fa-spinner fa-pulse"></i>
        <div id="modalLoadingtext"></div>
    </div>

    <div id="alertBox" style="max-width: 400px; position:fixed; bottom: 15px; right: 20px; margin: 0px; opacity: 0.95; z-index: 100; padding: 14px 18px; font-size: 16px;">
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/easing/easing.min.js"></script>
    <script src="~/lib/waypoints/waypoints.min.js"></script>
    <script src="~/lib/lightbox/js/lightbox.min.js"></script>
    <script src="~/lib/owlcarousel/owl.carousel.min.js"></script>

    <!-- Template Javascript -->
    <script src="~/js/main.js"></script>



    <!--vue2 development-->
    @*     <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    *@    <!--vue2 production-->
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js">
    </script>

    <script>

        Vue.config.ignoredElements = [
            'model-viewer'
            // other ignored elements if any
        ];

        //check image upload
        function isFileImage(file) {
            return file && file['type'].split('/')[0] === 'image';
        }

        function ShowLoading(text) {
            document.querySelector('modalLoading').style.display = 'flex';
            document.querySelector('modalLoadingtext').textContent = text;

        }
        function HideLoading() {
            document.querySelector('modalLoading').style.display = 'none';
            document.querySelector('modalLoadingtext').textContent = '';
        }

        //alert
        var timeoutAlertID;
        function ShowAlert(html, type) {
            var alertBox = document.querySelector('#alertBox');
            var alert = `<div class="alert alert-${type} alert-dismissible" role="alert">
                                                                                                                                                                                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>

                                                                                                                                                                        ${html}
                                                                                                                                                                    </div>`;

            if (timeoutAlertID) {
                alertBox.innerHTML = '';
                clearTimeout(timeoutAlertID);
            }

            alertBox.innerHTML = alert;
            timeoutAlertID = setTimeout(function () {
                alertBox.innerHTML = '';
            }, 3500);
        };


        //link
        // if (window.location.pathname.split('/')[1]) {
        //     var arrLinks = Array.from(document.querySelectorAll('.nav-link-head-a'));
        //     arrLinks.forEach(e => {
        //         if (e.getAttribute('data') == window.location.pathname.split('/')[1]) {
        //             e.classList.add('active');
        //         }
        //     });
        // }
        // else {
        //     document.getElementById('home-link').classList.add('active');
        // }

        //search
        function SearchEveryWhere() {
            window.location.href = window.location.origin + `/product?s=${document.getElementById('inputSearchE').value}`;
        }

        //cart
        async function RefreshCart() {

            var carts = JSON.parse(localStorage.getItem('carts')) ?? [];

            for (var i = 0; i < carts.length; i++) {

                await fetch("/Cart/CheckProduct", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        ID: carts[i].productID
                    })
                })
                    .then(response => response.json())
                    .then(res => {
                        if (res.data == false) {
                            carts = carts.filter(e => e.productID != productID);
                        }

                    })
                    .catch(error => {
                        ShowAlert(error, "danger");
                    });
            }
            localStorage.setItem('carts', JSON.stringify(carts));
            var number = 0;
            carts.forEach(e => {
                number = number + e.amount;
            })
            console.log(carts);
            // document.getElementById("idcartnumber").textContent = number;

        }

        function AddToCart(productID, amount) {
            const cartsJSON = localStorage.getItem('carts');
            const carts = JSON.parse(cartsJSON) ?? [];

            var item = carts.find(e => e.productID == productID);
            if (item && item != undefined && carts.length > 0) {
                item.amount = item.amount + amount;
            }
            else {
                carts.push({ productID: productID, amount: amount });
            }

            localStorage.setItem('carts', JSON.stringify(carts));
            ShowAlert(`Đã thêm ${amount} sản phẩm vào giỏ hàng!`, 'success');
            RefreshCart();
        }
        async function RemoveItemCart(productID) {
            let cartsJSON = localStorage.getItem('carts');
            let carts = JSON.parse(cartsJSON) ?? [];

            carts = carts.filter(e => e.productID != productID);

            localStorage.setItem('carts', JSON.stringify(carts));
            await RefreshCart();
        }
        async function RemoveAmountItemCart(productID, amount) {
            const cartsJSON = localStorage.getItem('carts');
            const carts = JSON.parse(cartsJSON) ?? [];

            var item = carts.find(e => e.productID == productID);
            if (item && item != undefined && item.amount > 0) {
                item.amount = item.amount - amount;
            }

            localStorage.setItem('carts', JSON.stringify(carts));
            await RefreshCart();
        }


        // RefreshCart();
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>